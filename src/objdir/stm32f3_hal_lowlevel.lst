   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 4
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f3_hal_lowlevel.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_GetTick,"ax",%progbits
  21              		.align	1
  22              		.global	HAL_GetTick
  23              		.thumb
  24              		.thumb_func
  26              	HAL_GetTick:
  27              	.LFB123:
  28              		.file 1 ".././hal/stm32f3/stm32f3_hal_lowlevel.c"
   1:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /* This file combines several STM32F4 HAL Functions into one file. This was done
   2:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    for space reasons, to avoid having several MB of HAL functions that most people
   3:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    will not use. In addition this HAL is slightly less demanding (no interrupts),
   4:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    but less robust as doesn't implement the timeouts.
   5:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    
   6:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    The original HAL files are COPYRIGHT STMicroelectronics, as shown below:
   7:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** */
   8:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
   9:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /*
  10:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
  11:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  12:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * Redistribution and use in source and binary forms, with or without modification,
  13:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * are permitted provided that the following conditions are met:
  14:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  15:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer.
  16:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  17:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer in the documentation
  18:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      and/or other materials provided with the distribution.
  19:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  20:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      may be used to endorse or promote products derived from this software
  21:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      without specific prior written permission.
  22:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  23:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  25:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  27:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  28:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  29:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  30:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  31:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  32:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  34:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   ******************************************************************************
  35:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** */ 
  36:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  37:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  38:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal.h"
  39:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal_lowlevel.h"
  40:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_rcc.h"
  41:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_gpio.h"
  42:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_dma.h"
  43:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_uart.h"
  44:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_flash.h"
  45:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  46:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define assert_param(expr) ((void)0U)
  47:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  48:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_GetTick(void)
  49:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  29              		.loc 1 49 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  50:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	static uint32_t tick;
  51:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return tick++;;
  34              		.loc 1 51 0
  35 0000 024B     		ldr	r3, .L2
  36 0002 1868     		ldr	r0, [r3]
  37 0004 421C     		adds	r2, r0, #1
  38 0006 1A60     		str	r2, [r3]
  52:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  39              		.loc 1 52 0
  40 0008 7047     		bx	lr
  41              	.L3:
  42 000a 00BF     		.align	2
  43              	.L2:
  44 000c 00000000 		.word	.LANCHOR0
  45              		.cfi_endproc
  46              	.LFE123:
  48              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
  49              		.align	1
  50              		.global	HAL_RCC_GetSysClockFreq
  51              		.thumb
  52              		.thumb_func
  54              	HAL_RCC_GetSysClockFreq:
  55              	.LFB124:
  53:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  54:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RCC_CFGR_HPRE_BITNUMBER           POSITION_VAL(RCC_CFGR_HPRE)
  55:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  56:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
  57:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                      USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or U
  58:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  59:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
  60:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  56              		.loc 1 60 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return 7372800U;
  62:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  61              		.loc 1 62 0
  62 0000 4FF4E100 		mov	r0, #7372800
  63 0004 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE124:
  67              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
  68              		.align	1
  69              		.global	HAL_RCC_GetPCLK1Freq
  70              		.thumb
  71              		.thumb_func
  73              	HAL_RCC_GetPCLK1Freq:
  74              	.LFB125:
  63:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  64:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
  65:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  75              		.loc 1 65 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  66:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return 7372800U;
  67:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  80              		.loc 1 67 0
  81 0000 4FF4E100 		mov	r0, #7372800
  82 0004 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE125:
  86              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  87              		.align	1
  88              		.global	HAL_RCC_OscConfig
  89              		.thumb
  90              		.thumb_func
  92              	HAL_RCC_OscConfig:
  93              	.LFB126:
  68:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  69:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
  70:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
  71:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         RCC_OscInitTypeDef.
  72:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  73:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC Oscillators.
  74:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The PLL is not disabled when used as system clock.
  75:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
  76:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to LSE Off
  77:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then LSE On or LSE Bypass.
  78:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
  79:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to HSE Off
  80:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then HSE On or HSE Bypass.
  81:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
  82:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
  83:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
  84:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  94              		.loc 1 84 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 8
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL0:
  85:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
  86:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  87:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
  88:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_OscInitStruct != NULL);
  89:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  90:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  91:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
  92:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  99              		.loc 1 92 0
 100 0000 0368     		ldr	r3, [r0]
  84:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 101              		.loc 1 84 0
 102 0002 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 103              	.LCFI0:
 104              		.cfi_def_cfa_offset 32
 105              		.cfi_offset 0, -32
 106              		.cfi_offset 1, -28
 107              		.cfi_offset 2, -24
 108              		.cfi_offset 4, -20
 109              		.cfi_offset 5, -16
 110              		.cfi_offset 6, -12
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113              		.loc 1 92 0
 114 0004 DA07     		lsls	r2, r3, #31
  84:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 115              		.loc 1 84 0
 116 0006 0546     		mov	r5, r0
 117              		.loc 1 92 0
 118 0008 03D4     		bmi	.L7
 119              	.LVL1:
 120              	.L14:
  93:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
  94:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
  95:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
  96:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  97:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
  98:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
  99:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 100:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 101:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 102:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 103:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 104:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 105:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 106:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 107:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 108:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Set the new HSE configuration ---------------------------------------*/
 109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 110:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 111:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
 112:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the HSE predivision factor --------------------------------*/
 113:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 114:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
 115:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 116:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Check the HSE State */
 117:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 118:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 119:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 120:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 121:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 122:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is ready */
 123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 124:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 125:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 126:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 127:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 128:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 129:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 130:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 131:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 132:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 133:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 135:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 136:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is disabled */
 137:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 138:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 139:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 140:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 141:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 142:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 143:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 144:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 145:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 147:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 121              		.loc 1 148 0
 122 000a 2B68     		ldr	r3, [r5]
 123 000c 9B07     		lsls	r3, r3, #30
 124 000e 7AD4     		bmi	.L8
 125 0010 F0E0     		b	.L31
 126              	.LVL2:
 127              	.L7:
  98:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 128              		.loc 1 98 0
 129 0012 B64C     		ldr	r4, .L120
 130 0014 6368     		ldr	r3, [r4, #4]
 131 0016 03F00C03 		and	r3, r3, #12
 132 001a 042B     		cmp	r3, #4
 133 001c 07D0     		beq	.L10
  99:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 134              		.loc 1 99 0
 135 001e 6368     		ldr	r3, [r4, #4]
 136 0020 03F00C03 		and	r3, r3, #12
 137 0024 082B     		cmp	r3, #8
 138 0026 19D1     		bne	.L11
  99:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 139              		.loc 1 99 0 is_stmt 0 discriminator 1
 140 0028 6368     		ldr	r3, [r4, #4]
 141 002a DF03     		lsls	r7, r3, #15
 142 002c 16D5     		bpl	.L11
 143              	.L10:
 144              	.LVL3:
 145              	.LBB162:
 146              	.LBB163:
 147              		.file 2 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h"
   1:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**************************************************************************//**
   2:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @version  V4.30
   5:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @date     20. October 2015
   6:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  ******************************************************************************/
   7:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
   9:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    All rights reserved.
  10:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      specific prior written permission.
  20:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    *
  21:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  34:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  35:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  38:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
  45:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  46:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  47:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
  51:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  52:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  53:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  54:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  58:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  60:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  62:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  63:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  64:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  65:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  69:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  71:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  73:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  74:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  75:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  76:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Control Register
  77:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Control Register value
  79:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  80:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  82:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
  83:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  84:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
  86:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  87:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  88:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  89:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  90:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Control Register
  91:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  94:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  96:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  98:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  99:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 100:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 101:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               IPSR Register value
 104:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 105:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 107:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 108:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 109:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 111:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 112:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 113:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 114:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 115:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get APSR Register
 116:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               APSR Register value
 118:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 119:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 121:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 122:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 123:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 125:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 126:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 127:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 128:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 129:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 132:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \return               xPSR Register value
 133:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 134:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 136:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 137:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 138:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 140:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 141:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 142:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 143:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 144:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               PSP Register value
 147:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 148:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 150:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 151:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 152:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 154:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 155:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 156:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 157:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 158:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 162:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 164:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 166:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 167:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 168:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 169:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               MSP Register value
 172:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 173:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 175:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 176:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 177:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 179:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 180:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 181:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 182:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 183:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 186:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 188:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 190:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 192:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 193:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 194:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 195:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Priority Mask value
 198:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 199:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 201:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 202:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 203:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 205:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 206:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 207:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 208:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 209:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 213:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 215:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 217:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 218:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 219:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 221:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 222:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable FIQ
 223:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 226:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 228:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 230:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 231:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 232:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 233:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable FIQ
 234:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 237:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 239:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 241:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 242:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 243:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 244:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Base Priority
 245:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Base Priority register value
 247:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 248:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 250:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 251:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 252:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 254:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 255:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 256:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 257:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 258:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority
 259:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 262:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 264:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 266:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 267:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 268:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 269:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 274:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 276:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 278:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 279:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 280:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 281:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Fault Mask register value
 284:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 285:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 287:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 288:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 289:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 291:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 292:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 293:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 294:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 295:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 299:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 301:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 303:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 304:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 306:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 307:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 309:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 310:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get FPSCR
 311:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 314:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 316:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 318:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 319:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 321:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 323:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 324:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 325:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    return(0);
 326:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 327:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 328:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 329:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 330:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 331:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set FPSCR
 332:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 335:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 337:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 340:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 342:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 343:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 344:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 345:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 347:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 348:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 349:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 351:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 352:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Access to dedicated instructions
 355:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
 356:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** */
 357:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 358:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 365:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 368:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 369:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 370:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   No Operation
 371:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 373:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 375:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 377:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 378:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 379:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 380:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 383:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 385:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 387:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 388:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 389:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 390:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Event
 391:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 394:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 396:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 398:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 399:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 400:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 401:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Send Event
 402:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 404:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 406:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 408:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 409:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 410:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 411:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            after the instruction has been completed.
 415:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 416:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 418:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 420:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 421:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 422:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 423:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 427:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 429:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 431:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 432:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 433:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 434:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 438:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 440:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 442:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 443:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 444:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 445:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 449:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 450:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 452:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 455:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 456:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 457:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 459:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 460:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 461:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 462:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 463:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 464:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 468:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 469:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 471:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 472:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 473:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 475:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 476:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 477:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 478:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 479:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 483:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 484:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 486:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 489:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   int32_t result;
 490:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 491:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 493:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 494:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 495:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 496:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 497:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 498:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Rotated value
 503:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 504:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 506:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 508:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 509:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 510:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 511:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Breakpoint
 512:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 517:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 519:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 520:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 521:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 525:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 526:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 528:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 529:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 530:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 148              		.loc 2 531 0 is_stmt 1
 149 002e 4FF40033 		mov	r3, #131072
 150              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 151 0032 93FAA3F3 		rbit r3, r3
 152              	@ 0 "" 2
 153              		.thumb
 154              	.LBE163:
 155              	.LBE162:
 156              	.LBB164:
 157              	.LBB165:
 158 0036 4FF40032 		mov	r2, #131072
 159              	.LBE165:
 160              	.LBE164:
 101:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 161              		.loc 1 101 0
 162 003a 2368     		ldr	r3, [r4]
 163              	.LVL4:
 164              	.LBB167:
 165              	.LBB166:
 166              		.loc 2 531 0
 167              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 168 003c 92FAA2F2 		rbit r2, r2
 169              	@ 0 "" 2
 170              	.LVL5:
 171              		.thumb
 172              	.LBE166:
 173              	.LBE167:
 101:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 174              		.loc 1 101 0
 175 0040 B2FA82F2 		clz	r2, r2
 176              	.LVL6:
 177 0044 02F01F02 		and	r2, r2, #31
 178 0048 0121     		movs	r1, #1
 179 004a 01FA02F2 		lsl	r2, r1, r2
 180 004e 1A42     		tst	r2, r3
 181 0050 DBD0     		beq	.L14
 101:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 182              		.loc 1 101 0 is_stmt 0 discriminator 1
 183 0052 6B68     		ldr	r3, [r5, #4]
 184 0054 002B     		cmp	r3, #0
 185 0056 D8D1     		bne	.L14
 186              	.LVL7:
 187              	.L37:
 103:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 188              		.loc 1 103 0 is_stmt 1
 189 0058 0120     		movs	r0, #1
 190 005a 47E2     		b	.L15
 191              	.LVL8:
 192              	.L11:
 109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 193              		.loc 1 109 0
 194 005c 6B68     		ldr	r3, [r5, #4]
 195 005e B3F5803F 		cmp	r3, #65536
 196 0062 07D0     		beq	.L116
 109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 197              		.loc 1 109 0 is_stmt 0 discriminator 2
 198 0064 2268     		ldr	r2, [r4]
 199 0066 4BB1     		cbz	r3, .L19
 200 0068 B3F5A02F 		cmp	r3, #327680
 201 006c 06D1     		bne	.L19
 109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 202              		.loc 1 109 0 discriminator 1
 203 006e 42F48022 		orr	r2, r2, #262144
 204 0072 2260     		str	r2, [r4]
 205              	.L116:
 206 0074 2268     		ldr	r2, [r4]
 207 0076 42F48032 		orr	r2, r2, #65536
 208 007a 05E0     		b	.L113
 209              	.L19:
 109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 210              		.loc 1 109 0 discriminator 2
 211 007c 22F48032 		bic	r2, r2, #65536
 212 0080 2260     		str	r2, [r4]
 213 0082 2268     		ldr	r2, [r4]
 214 0084 22F48022 		bic	r2, r2, #262144
 215              	.L113:
 216 0088 2260     		str	r2, [r4]
 113:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
 217              		.loc 1 113 0 is_stmt 1 discriminator 2
 218 008a E16A     		ldr	r1, [r4, #44]
 219 008c AA68     		ldr	r2, [r5, #8]
 220 008e 21F00F01 		bic	r1, r1, #15
 221 0092 0A43     		orrs	r2, r2, r1
 222 0094 E262     		str	r2, [r4, #44]
 117:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 223              		.loc 1 117 0 discriminator 2
 224 0096 DBB1     		cbz	r3, .L20
 120:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 225              		.loc 1 120 0
 226 0098 FFF7FEFF 		bl	HAL_GetTick
 227              	.LVL9:
 228 009c 0646     		mov	r6, r0
 229              	.LVL10:
 230              	.L21:
 231              	.LBB168:
 232              	.LBB169:
 233              		.loc 2 531 0 discriminator 1
 234 009e 4FF40033 		mov	r3, #131072
 235              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 236 00a2 93FAA3F3 		rbit r3, r3
 237              	@ 0 "" 2
 238              		.thumb
 239              	.LBE169:
 240              	.LBE168:
 241              	.LBB170:
 242              	.LBB171:
 243 00a6 4FF40032 		mov	r2, #131072
 244              	.LBE171:
 245              	.LBE170:
 123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 246              		.loc 1 123 0 discriminator 1
 247 00aa 2368     		ldr	r3, [r4]
 248              	.LVL11:
 249              	.LBB173:
 250              	.LBB172:
 251              		.loc 2 531 0 discriminator 1
 252              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 253 00ac 92FAA2F2 		rbit r2, r2
 254              	@ 0 "" 2
 255              	.LVL12:
 256              		.thumb
 257              	.LBE172:
 258              	.LBE173:
 123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 259              		.loc 1 123 0 discriminator 1
 260 00b0 B2FA82F2 		clz	r2, r2
 261              	.LVL13:
 262 00b4 02F01F02 		and	r2, r2, #31
 263 00b8 0121     		movs	r1, #1
 264 00ba 01FA02F2 		lsl	r2, r1, r2
 265 00be 1A42     		tst	r2, r3
 266 00c0 A3D1     		bne	.L14
 125:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 267              		.loc 1 125 0
 268 00c2 FFF7FEFF 		bl	HAL_GetTick
 269              	.LVL14:
 270 00c6 801B     		subs	r0, r0, r6
 271 00c8 6428     		cmp	r0, #100
 272 00ca E8D9     		bls	.L21
 273              	.LVL15:
 274              	.L27:
 127:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 275              		.loc 1 127 0
 276 00cc 0320     		movs	r0, #3
 277 00ce 0DE2     		b	.L15
 278              	.LVL16:
 279              	.L20:
 134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 280              		.loc 1 134 0
 281 00d0 FFF7FEFF 		bl	HAL_GetTick
 282              	.LVL17:
 283 00d4 0646     		mov	r6, r0
 284              	.LVL18:
 285              	.L26:
 286              	.LBB174:
 287              	.LBB175:
 288              		.loc 2 531 0 discriminator 1
 289 00d6 4FF40033 		mov	r3, #131072
 290              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 291 00da 93FAA3F3 		rbit r3, r3
 292              	@ 0 "" 2
 293              		.thumb
 294              	.LBE175:
 295              	.LBE174:
 296              	.LBB176:
 297              	.LBB177:
 298 00de 4FF40032 		mov	r2, #131072
 299              	.LBE177:
 300              	.LBE176:
 137:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 301              		.loc 1 137 0 discriminator 1
 302 00e2 2368     		ldr	r3, [r4]
 303              	.LVL19:
 304              	.LBB179:
 305              	.LBB178:
 306              		.loc 2 531 0 discriminator 1
 307              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 308 00e4 92FAA2F2 		rbit r2, r2
 309              	@ 0 "" 2
 310              	.LVL20:
 311              		.thumb
 312              	.LBE178:
 313              	.LBE179:
 137:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 314              		.loc 1 137 0 discriminator 1
 315 00e8 B2FA82F2 		clz	r2, r2
 316              	.LVL21:
 317 00ec 02F01F02 		and	r2, r2, #31
 318 00f0 0121     		movs	r1, #1
 319 00f2 01FA02F2 		lsl	r2, r1, r2
 320 00f6 1A42     		tst	r2, r3
 321 00f8 87D0     		beq	.L14
 139:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 322              		.loc 1 139 0
 323 00fa FFF7FEFF 		bl	HAL_GetTick
 324              	.LVL22:
 325 00fe 801B     		subs	r0, r0, r6
 326 0100 6428     		cmp	r0, #100
 327 0102 E8D9     		bls	.L26
 328 0104 E2E7     		b	.L27
 329              	.LVL23:
 330              	.L8:
 149:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 150:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 151:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 152:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 153:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 154:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 155:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 331              		.loc 1 155 0
 332 0106 794C     		ldr	r4, .L120
 333 0108 6368     		ldr	r3, [r4, #4]
 334 010a 13F00C0F 		tst	r3, #12
 335 010e 07D0     		beq	.L32
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 336              		.loc 1 156 0
 337 0110 6368     		ldr	r3, [r4, #4]
 338 0112 03F00C03 		and	r3, r3, #12
 339 0116 082B     		cmp	r3, #8
 340 0118 16D1     		bne	.L33
 341              		.loc 1 156 0 is_stmt 0 discriminator 1
 342 011a 6368     		ldr	r3, [r4, #4]
 343 011c DE03     		lsls	r6, r3, #15
 344 011e 13D4     		bmi	.L33
 345              	.L32:
 346              	.LVL24:
 347              	.LBB180:
 348              	.LBB181:
 349              		.loc 2 531 0 is_stmt 1
 350 0120 0223     		movs	r3, #2
 351              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 352 0122 93FAA3F3 		rbit r3, r3
 353              	@ 0 "" 2
 354              		.thumb
 355              	.LBE181:
 356              	.LBE180:
 357              	.LBB182:
 358              	.LBB183:
 359 0126 0222     		movs	r2, #2
 360              	.LBE183:
 361              	.LBE182:
 157:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 158:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* When HSI is used as system clock it will not disabled */
 159:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 362              		.loc 1 159 0
 363 0128 2368     		ldr	r3, [r4]
 364              	.LVL25:
 365              	.LBB185:
 366              	.LBB184:
 367              		.loc 2 531 0
 368              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 369 012a 92FAA2F2 		rbit r2, r2
 370              	@ 0 "" 2
 371              	.LVL26:
 372              		.thumb
 373              	.LBE184:
 374              	.LBE185:
 375              		.loc 1 159 0
 376 012e B2FA82F2 		clz	r2, r2
 377              	.LVL27:
 378 0132 02F01F02 		and	r2, r2, #31
 379 0136 0121     		movs	r1, #1
 380 0138 01FA02F2 		lsl	r2, r1, r2
 381 013c 1A42     		tst	r2, r3
 382 013e 29D0     		beq	.L114
 383              		.loc 1 159 0 is_stmt 0 discriminator 1
 384 0140 2B69     		ldr	r3, [r5, #16]
 385 0142 8B42     		cmp	r3, r1
 386 0144 88D1     		bne	.L37
 387 0146 25E0     		b	.L114
 388              	.LVL28:
 389              	.L33:
 160:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 161:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 162:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 163:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Otherwise, just the calibration is allowed */
 164:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 165:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 166:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 167:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 168:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 169:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 171:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 172:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI State */
 173:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 390              		.loc 1 173 0 is_stmt 1
 391 0148 2A69     		ldr	r2, [r5, #16]
 392 014a 0123     		movs	r3, #1
 393 014c 7AB3     		cbz	r2, .L38
 394              	.LVL29:
 395              	.LBB186:
 396              	.LBB187:
 397              		.loc 2 531 0
 398              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 399 014e 93FAA3F2 		rbit r2, r3
 400              	@ 0 "" 2
 401              	.LVL30:
 402              		.thumb
 403              	.LBE187:
 404              	.LBE186:
 174:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 175:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 176:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_ENABLE();
 405              		.loc 1 176 0
 406 0152 B2FA82F2 		clz	r2, r2
 407              	.LVL31:
 408 0156 02F18452 		add	r2, r2, #276824064
 409 015a 02F58412 		add	r2, r2, #1081344
 410 015e 9200     		lsls	r2, r2, #2
 411 0160 1360     		str	r3, [r2]
 177:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 178:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 179:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 412              		.loc 1 179 0
 413 0162 FFF7FEFF 		bl	HAL_GetTick
 414              	.LVL32:
 415 0166 0646     		mov	r6, r0
 416              	.LVL33:
 417              	.L39:
 418              	.LBB188:
 419              	.LBB189:
 420              		.loc 2 531 0 discriminator 1
 421 0168 0223     		movs	r3, #2
 422              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 423 016a 93FAA3F3 		rbit r3, r3
 424              	@ 0 "" 2
 425              		.thumb
 426              	.LBE189:
 427              	.LBE188:
 428              	.LBB190:
 429              	.LBB191:
 430 016e 0222     		movs	r2, #2
 431              	.LBE191:
 432              	.LBE190:
 180:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 181:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is ready */
 182:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 433              		.loc 1 182 0 discriminator 1
 434 0170 2368     		ldr	r3, [r4]
 435              	.LVL34:
 436              	.LBB193:
 437              	.LBB192:
 438              		.loc 2 531 0 discriminator 1
 439              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 440 0172 92FAA2F2 		rbit r2, r2
 441              	@ 0 "" 2
 442              	.LVL35:
 443              		.thumb
 444              	.LBE192:
 445              	.LBE193:
 446              		.loc 1 182 0 discriminator 1
 447 0176 B2FA82F2 		clz	r2, r2
 448              	.LVL36:
 449 017a 02F01F02 		and	r2, r2, #31
 450 017e 0121     		movs	r1, #1
 451 0180 01FA02F2 		lsl	r2, r1, r2
 452 0184 1A42     		tst	r2, r3
 453 0186 05D1     		bne	.L114
 183:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 454              		.loc 1 184 0
 455 0188 FFF7FEFF 		bl	HAL_GetTick
 456              	.LVL37:
 457 018c 801B     		subs	r0, r0, r6
 458 018e 0228     		cmp	r0, #2
 459 0190 EAD9     		bls	.L39
 460 0192 9BE7     		b	.L27
 461              	.LVL38:
 462              	.L114:
 185:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 186:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 187:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 188:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 189:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                 
 190:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 191:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 463              		.loc 1 191 0
 464 0194 2268     		ldr	r2, [r4]
 465              	.LVL39:
 466              	.LBB194:
 467              	.LBB195:
 468              		.loc 2 531 0
 469 0196 F821     		movs	r1, #248
 470              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 471 0198 91FAA1F1 		rbit r1, r1
 472              	@ 0 "" 2
 473              	.LVL40:
 474              		.thumb
 475              	.LBE195:
 476              	.LBE194:
 477              		.loc 1 191 0
 478 019c 6B69     		ldr	r3, [r5, #20]
 479 019e B1FA81F1 		clz	r1, r1
 480              	.LVL41:
 481 01a2 8B40     		lsls	r3, r3, r1
 482 01a4 22F0F802 		bic	r2, r2, #248
 483 01a8 1343     		orrs	r3, r3, r2
 484 01aa 2360     		str	r3, [r4]
 485 01ac 22E0     		b	.L31
 486              	.LVL42:
 487              	.L38:
 488              	.LBB196:
 489              	.LBB197:
 490              		.loc 2 531 0
 491              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 492 01ae 93FAA3F3 		rbit r3, r3
 493              	@ 0 "" 2
 494              	.LVL43:
 495              		.thumb
 496              	.LBE197:
 497              	.LBE196:
 192:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 193:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 194:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 195:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 196:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_DISABLE();
 498              		.loc 1 196 0
 499 01b2 B3FA83F3 		clz	r3, r3
 500              	.LVL44:
 501 01b6 03F18453 		add	r3, r3, #276824064
 502 01ba 03F58413 		add	r3, r3, #1081344
 503 01be 9B00     		lsls	r3, r3, #2
 504 01c0 1A60     		str	r2, [r3]
 197:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 198:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 199:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 505              		.loc 1 199 0
 506 01c2 FFF7FEFF 		bl	HAL_GetTick
 507              	.LVL45:
 508 01c6 0646     		mov	r6, r0
 509              	.LVL46:
 510              	.L43:
 511              	.LBB198:
 512              	.LBB199:
 513              		.loc 2 531 0 discriminator 1
 514 01c8 0223     		movs	r3, #2
 515              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 516 01ca 93FAA3F3 		rbit r3, r3
 517              	@ 0 "" 2
 518              		.thumb
 519              	.LBE199:
 520              	.LBE198:
 521              	.LBB200:
 522              	.LBB201:
 523 01ce 0222     		movs	r2, #2
 524              	.LBE201:
 525              	.LBE200:
 200:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 201:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is disabled */
 202:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 526              		.loc 1 202 0 discriminator 1
 527 01d0 2368     		ldr	r3, [r4]
 528              	.LVL47:
 529              	.LBB203:
 530              	.LBB202:
 531              		.loc 2 531 0 discriminator 1
 532              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 533 01d2 92FAA2F2 		rbit r2, r2
 534              	@ 0 "" 2
 535              	.LVL48:
 536              		.thumb
 537              	.LBE202:
 538              	.LBE203:
 539              		.loc 1 202 0 discriminator 1
 540 01d6 B2FA82F2 		clz	r2, r2
 541              	.LVL49:
 542 01da 02F01F02 		and	r2, r2, #31
 543 01de 0121     		movs	r1, #1
 544 01e0 01FA02F2 		lsl	r2, r1, r2
 545 01e4 1A42     		tst	r2, r3
 546 01e6 05D0     		beq	.L31
 203:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 204:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 547              		.loc 1 204 0
 548 01e8 FFF7FEFF 		bl	HAL_GetTick
 549              	.LVL50:
 550 01ec 801B     		subs	r0, r0, r6
 551 01ee 0228     		cmp	r0, #2
 552 01f0 EAD9     		bls	.L43
 553 01f2 6BE7     		b	.L27
 554              	.LVL51:
 555              	.L31:
 205:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 206:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 207:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 208:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 209:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 210:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 211:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 212:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 213:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 556              		.loc 1 213 0
 557 01f4 2B68     		ldr	r3, [r5]
 558 01f6 1C07     		lsls	r4, r3, #28
 559 01f8 03D4     		bmi	.L47
 560              	.L53:
 214:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 215:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 216:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 217:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 218:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSI State */
 219:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 220:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 221:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 222:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_ENABLE();
 223:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 224:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 225:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 226:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 227:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is ready */  
 228:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 230:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 231:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 232:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 233:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 234:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 235:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 236:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 237:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 238:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 239:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_DISABLE();
 240:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 241:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 242:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 243:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 244:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is disabled */  
 245:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 246:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 247:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 248:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 250:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 251:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 252:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 253:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 254:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 255:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 561              		.loc 1 255 0
 562 01fa 2B68     		ldr	r3, [r5]
 563 01fc 5807     		lsls	r0, r3, #29
 564 01fe 4CD4     		bmi	.L48
 565 0200 E9E0     		b	.L56
 566              	.L47:
 219:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 567              		.loc 1 219 0
 568 0202 AA69     		ldr	r2, [r5, #24]
 569 0204 394C     		ldr	r4, .L120
 570 0206 0123     		movs	r3, #1
 571 0208 1AB3     		cbz	r2, .L50
 572              	.LVL52:
 573              	.LBB204:
 574              	.LBB205:
 575              		.loc 2 531 0
 576              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 577 020a 93FAA3F1 		rbit r1, r3
 578              	@ 0 "" 2
 579              	.LVL53:
 580              		.thumb
 581              	.LBE205:
 582              	.LBE204:
 222:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 583              		.loc 1 222 0
 584 020e 384A     		ldr	r2, .L120+4
 585 0210 B1FA81F1 		clz	r1, r1
 586              	.LVL54:
 587 0214 0A44     		add	r2, r2, r1
 588 0216 9200     		lsls	r2, r2, #2
 589 0218 1360     		str	r3, [r2]
 225:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 590              		.loc 1 225 0
 591 021a FFF7FEFF 		bl	HAL_GetTick
 592              	.LVL55:
 593 021e 0646     		mov	r6, r0
 594              	.LVL56:
 595              	.L51:
 596              	.LBB206:
 597              	.LBB207:
 598              		.loc 2 531 0 discriminator 1
 599 0220 0223     		movs	r3, #2
 600              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 601 0222 93FAA3F2 		rbit r2, r3
 602              	@ 0 "" 2
 603              	.LVL57:
 604              		.thumb
 605              	.LBE207:
 606              	.LBE206:
 607              	.LBB208:
 608              	.LBB209:
 609              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 610 0226 93FAA3F2 		rbit r2, r3
 611              	@ 0 "" 2
 612              	.LVL58:
 613              		.thumb
 614              	.LBE209:
 615              	.LBE208:
 616              	.LBB210:
 617              	.LBB211:
 618              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 619 022a 93FAA3F2 		rbit r2, r3
 620              	@ 0 "" 2
 621              	.LVL59:
 622              		.thumb
 623              	.LBE211:
 624              	.LBE210:
 228:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 625              		.loc 1 228 0 discriminator 1
 626 022e 626A     		ldr	r2, [r4, #36]
 627              	.LVL60:
 628              	.LBB212:
 629              	.LBB213:
 630              		.loc 2 531 0 discriminator 1
 631              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 632 0230 93FAA3F3 		rbit r3, r3
 633              	@ 0 "" 2
 634              	.LVL61:
 635              		.thumb
 636              	.LBE213:
 637              	.LBE212:
 228:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 638              		.loc 1 228 0 discriminator 1
 639 0234 B3FA83F3 		clz	r3, r3
 640              	.LVL62:
 641 0238 03F01F03 		and	r3, r3, #31
 642 023c 0121     		movs	r1, #1
 643 023e 01FA03F3 		lsl	r3, r1, r3
 644 0242 1342     		tst	r3, r2
 645 0244 D9D1     		bne	.L53
 230:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 646              		.loc 1 230 0
 647 0246 FFF7FEFF 		bl	HAL_GetTick
 648              	.LVL63:
 649 024a 801B     		subs	r0, r0, r6
 650 024c 0228     		cmp	r0, #2
 651 024e E7D9     		bls	.L51
 652 0250 3CE7     		b	.L27
 653              	.LVL64:
 654              	.L50:
 655              	.LBB214:
 656              	.LBB215:
 657              		.loc 2 531 0
 658              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 659 0252 93FAA3F3 		rbit r3, r3
 660              	@ 0 "" 2
 661              	.LVL65:
 662              		.thumb
 663              	.LBE215:
 664              	.LBE214:
 239:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 665              		.loc 1 239 0
 666 0256 B3FA83F1 		clz	r1, r3
 667 025a 254B     		ldr	r3, .L120+4
 668              	.LVL66:
 669 025c 0B44     		add	r3, r3, r1
 670 025e 9B00     		lsls	r3, r3, #2
 671 0260 1A60     		str	r2, [r3]
 242:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 672              		.loc 1 242 0
 673 0262 FFF7FEFF 		bl	HAL_GetTick
 674              	.LVL67:
 675 0266 0646     		mov	r6, r0
 676              	.LVL68:
 677              	.L54:
 678              	.LBB216:
 679              	.LBB217:
 680              		.loc 2 531 0 discriminator 1
 681 0268 0223     		movs	r3, #2
 682              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 683 026a 93FAA3F2 		rbit r2, r3
 684              	@ 0 "" 2
 685              	.LVL69:
 686              		.thumb
 687              	.LBE217:
 688              	.LBE216:
 689              	.LBB218:
 690              	.LBB219:
 691              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 692 026e 93FAA3F2 		rbit r2, r3
 693              	@ 0 "" 2
 694              	.LVL70:
 695              		.thumb
 696              	.LBE219:
 697              	.LBE218:
 698              	.LBB220:
 699              	.LBB221:
 700              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 701 0272 93FAA3F2 		rbit r2, r3
 702              	@ 0 "" 2
 703              	.LVL71:
 704              		.thumb
 705              	.LBE221:
 706              	.LBE220:
 245:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 707              		.loc 1 245 0 discriminator 1
 708 0276 626A     		ldr	r2, [r4, #36]
 709              	.LVL72:
 710              	.LBB222:
 711              	.LBB223:
 712              		.loc 2 531 0 discriminator 1
 713              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 714 0278 93FAA3F3 		rbit r3, r3
 715              	@ 0 "" 2
 716              	.LVL73:
 717              		.thumb
 718              	.LBE223:
 719              	.LBE222:
 245:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 720              		.loc 1 245 0 discriminator 1
 721 027c B3FA83F3 		clz	r3, r3
 722              	.LVL74:
 723 0280 03F01F03 		and	r3, r3, #31
 724 0284 0121     		movs	r1, #1
 725 0286 01FA03F3 		lsl	r3, r1, r3
 726 028a 1342     		tst	r3, r2
 727 028c B5D0     		beq	.L53
 247:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 728              		.loc 1 247 0
 729 028e FFF7FEFF 		bl	HAL_GetTick
 730              	.LVL75:
 731 0292 801B     		subs	r0, r0, r6
 732 0294 0228     		cmp	r0, #2
 733 0296 E7D9     		bls	.L54
 734 0298 18E7     		b	.L27
 735              	.LVL76:
 736              	.L48:
 737              	.LBB224:
 256:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 257:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     FlagStatus       pwrclkchanged = RESET;
 258:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 259:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 260:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 261:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 262:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Update LSE configuration in Backup Domain control register    */
 263:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Requires to enable write access to Backup Domain of necessary */
 264:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 738              		.loc 1 264 0
 739 029a 144C     		ldr	r4, .L120
 740 029c E369     		ldr	r3, [r4, #28]
 741 029e D900     		lsls	r1, r3, #3
 742 02a0 0AD4     		bmi	.L93
 743              	.LBB225:
 265:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 266:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 744              		.loc 1 266 0
 745 02a2 E369     		ldr	r3, [r4, #28]
 746 02a4 43F08053 		orr	r3, r3, #268435456
 747 02a8 E361     		str	r3, [r4, #28]
 748 02aa E369     		ldr	r3, [r4, #28]
 749 02ac 03F08053 		and	r3, r3, #268435456
 750 02b0 0193     		str	r3, [sp, #4]
 751 02b2 019B     		ldr	r3, [sp, #4]
 752              	.LVL77:
 753              	.LBE225:
 267:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       pwrclkchanged = SET;
 754              		.loc 1 267 0
 755 02b4 0126     		movs	r6, #1
 756 02b6 00E0     		b	.L57
 757              	.LVL78:
 758              	.L93:
 257:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 759              		.loc 1 257 0
 760 02b8 0026     		movs	r6, #0
 761              	.LVL79:
 762              	.L57:
 268:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 269:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 270:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 763              		.loc 1 270 0
 764 02ba 0E4B     		ldr	r3, .L120+8
 765 02bc 1A68     		ldr	r2, [r3]
 766 02be D205     		lsls	r2, r2, #23
 767 02c0 03D5     		bpl	.L58
 768              	.L63:
 271:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 272:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable write access to Backup domain */
 273:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 274:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait for Backup domain Write protection disable */
 276:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 277:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 278:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 279:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 280:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 281:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 282:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 283:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 284:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 285:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 286:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 287:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Set the new LSE configuration -----------------------------------------*/
 288:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 769              		.loc 1 288 0
 770 02c2 EB68     		ldr	r3, [r5, #12]
 771 02c4 012B     		cmp	r3, #1
 772 02c6 17D1     		bne	.L112
 773 02c8 29E0     		b	.L117
 774              	.L58:
 273:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 775              		.loc 1 273 0
 776 02ca 1A68     		ldr	r2, [r3]
 777 02cc 42F48072 		orr	r2, r2, #256
 778 02d0 1A60     		str	r2, [r3]
 276:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 779              		.loc 1 276 0
 780 02d2 FFF7FEFF 		bl	HAL_GetTick
 781              	.LVL80:
 782 02d6 0746     		mov	r7, r0
 783              	.LVL81:
 784              	.L61:
 278:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 785              		.loc 1 278 0 discriminator 1
 786 02d8 064B     		ldr	r3, .L120+8
 787 02da 1B68     		ldr	r3, [r3]
 788 02dc DB05     		lsls	r3, r3, #23
 789 02de F0D4     		bmi	.L63
 280:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 790              		.loc 1 280 0
 791 02e0 FFF7FEFF 		bl	HAL_GetTick
 792              	.LVL82:
 793 02e4 C01B     		subs	r0, r0, r7
 794 02e6 6428     		cmp	r0, #100
 795 02e8 F6D9     		bls	.L61
 796 02ea EFE6     		b	.L27
 797              	.L121:
 798              		.align	2
 799              	.L120:
 800 02ec 00100240 		.word	1073876992
 801 02f0 20819010 		.word	277905696
 802 02f4 00700040 		.word	1073770496
 803              	.LVL83:
 804              	.L112:
 805              		.loc 1 288 0 discriminator 2
 806 02f8 5BB9     		cbnz	r3, .L65
 807              		.loc 1 288 0 is_stmt 0 discriminator 1
 808 02fa 236A     		ldr	r3, [r4, #32]
 809 02fc 23F00103 		bic	r3, r3, #1
 810 0300 2362     		str	r3, [r4, #32]
 811 0302 236A     		ldr	r3, [r4, #32]
 812 0304 23F00403 		bic	r3, r3, #4
 813 0308 2362     		str	r3, [r4, #32]
 289:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 290:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 291:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 293:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 294:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 295:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is ready */  
 296:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 297:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 298:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 299:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 300:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 301:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 302:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 303:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 304:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 305:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 306:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 307:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 814              		.loc 1 307 0 is_stmt 1 discriminator 1
 815 030a FFF7FEFF 		bl	HAL_GetTick
 816              	.LVL84:
 817 030e 0746     		mov	r7, r0
 818              	.LVL85:
 308:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 309:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is disabled */  
 310:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 819              		.loc 1 310 0 discriminator 1
 820 0310 3FE0     		b	.L66
 821              	.LVL86:
 822              	.L65:
 288:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 823              		.loc 1 288 0 discriminator 2
 824 0312 052B     		cmp	r3, #5
 825 0314 236A     		ldr	r3, [r4, #32]
 826 0316 06D1     		bne	.L67
 288:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 827              		.loc 1 288 0 is_stmt 0 discriminator 1
 828 0318 43F00403 		orr	r3, r3, #4
 829 031c 2362     		str	r3, [r4, #32]
 830              	.L117:
 831 031e 236A     		ldr	r3, [r4, #32]
 832 0320 43F00103 		orr	r3, r3, #1
 833 0324 05E0     		b	.L115
 834              	.L67:
 288:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 835              		.loc 1 288 0 discriminator 2
 836 0326 23F00103 		bic	r3, r3, #1
 837 032a 2362     		str	r3, [r4, #32]
 838 032c 236A     		ldr	r3, [r4, #32]
 839 032e 23F00403 		bic	r3, r3, #4
 840              	.L115:
 841 0332 2362     		str	r3, [r4, #32]
 293:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 842              		.loc 1 293 0 is_stmt 1 discriminator 2
 843 0334 FFF7FEFF 		bl	HAL_GetTick
 844              	.LVL87:
 845 0338 0746     		mov	r7, r0
 846              	.LVL88:
 847              	.L69:
 848              	.LBB226:
 849              	.LBB227:
 850              		.loc 2 531 0 discriminator 1
 851 033a 0223     		movs	r3, #2
 852              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 853 033c 93FAA3F2 		rbit r2, r3
 854              	@ 0 "" 2
 855              	.LVL89:
 856              		.thumb
 857              	.LBE227:
 858              	.LBE226:
 859              	.LBB228:
 860              	.LBB229:
 861              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 862 0340 93FAA3F2 		rbit r2, r3
 863              	@ 0 "" 2
 864              	.LVL90:
 865              		.thumb
 866              	.LBE229:
 867              	.LBE228:
 296:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 868              		.loc 1 296 0 discriminator 1
 869 0344 B2FA82F2 		clz	r2, r2
 870              	.LVL91:
 871 0348 42F04002 		orr	r2, r2, #64
 872 034c 5209     		lsrs	r2, r2, #5
 873 034e 9A42     		cmp	r2, r3
 874 0350 01D1     		bne	.L70
 296:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 875              		.loc 1 296 0 is_stmt 0 discriminator 3
 876 0352 226A     		ldr	r2, [r4, #32]
 877 0354 02E0     		b	.L71
 878              	.L70:
 879              	.LVL92:
 880              	.LBB230:
 881              	.LBB231:
 882              		.loc 2 531 0 is_stmt 1
 883              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 884 0356 93FAA3F2 		rbit r2, r3
 885              	@ 0 "" 2
 886              	.LVL93:
 887              		.thumb
 888              	.LBE231:
 889              	.LBE230:
 296:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 890              		.loc 1 296 0
 891 035a 626A     		ldr	r2, [r4, #36]
 892              	.LVL94:
 893              	.L71:
 894              	.LBB232:
 895              	.LBB233:
 896              		.loc 2 531 0 discriminator 8
 897              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 898 035c 93FAA3F3 		rbit r3, r3
 899              	@ 0 "" 2
 900              	.LVL95:
 901              		.thumb
 902              	.LBE233:
 903              	.LBE232:
 296:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 904              		.loc 1 296 0 discriminator 8
 905 0360 B3FA83F3 		clz	r3, r3
 906              	.LVL96:
 907 0364 03F01F03 		and	r3, r3, #31
 908 0368 0121     		movs	r1, #1
 909 036a 01FA03F3 		lsl	r3, r1, r3
 910 036e 1342     		tst	r3, r2
 911 0370 27D1     		bne	.L77
 298:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 912              		.loc 1 298 0
 913 0372 FFF7FEFF 		bl	HAL_GetTick
 914              	.LVL97:
 915 0376 41F28833 		movw	r3, #5000
 916 037a C01B     		subs	r0, r0, r7
 917 037c 9842     		cmp	r0, r3
 918 037e DCD9     		bls	.L69
 919 0380 A4E6     		b	.L27
 920              	.LVL98:
 921              	.L76:
 311:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 312:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 922              		.loc 1 312 0
 923 0382 FFF7FEFF 		bl	HAL_GetTick
 924              	.LVL99:
 925 0386 41F28833 		movw	r3, #5000
 926 038a C01B     		subs	r0, r0, r7
 927 038c 9842     		cmp	r0, r3
 928 038e 3FF69DAE 		bhi	.L27
 929              	.LVL100:
 930              	.L66:
 931              	.LBB234:
 932              	.LBB235:
 933              		.loc 2 531 0 discriminator 1
 934 0392 0223     		movs	r3, #2
 935              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 936 0394 93FAA3F2 		rbit r2, r3
 937              	@ 0 "" 2
 938              	.LVL101:
 939              		.thumb
 940              	.LBE235:
 941              	.LBE234:
 942              	.LBB236:
 943              	.LBB237:
 944              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 945 0398 93FAA3F2 		rbit r2, r3
 946              	@ 0 "" 2
 947              	.LVL102:
 948              		.thumb
 949              	.LBE237:
 950              	.LBE236:
 310:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 951              		.loc 1 310 0 discriminator 1
 952 039c B2FA82F2 		clz	r2, r2
 953              	.LVL103:
 954 03a0 42F04002 		orr	r2, r2, #64
 955 03a4 5209     		lsrs	r2, r2, #5
 956 03a6 9A42     		cmp	r2, r3
 957 03a8 11D1     		bne	.L74
 310:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 958              		.loc 1 310 0 is_stmt 0 discriminator 3
 959 03aa 226A     		ldr	r2, [r4, #32]
 960              	.L75:
 961              	.LVL104:
 962              	.LBB238:
 963              	.LBB239:
 964              		.loc 2 531 0 is_stmt 1 discriminator 8
 965              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 966 03ac 93FAA3F3 		rbit r3, r3
 967              	@ 0 "" 2
 968              	.LVL105:
 969              		.thumb
 970              	.LBE239:
 971              	.LBE238:
 310:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 972              		.loc 1 310 0 discriminator 8
 973 03b0 B3FA83F3 		clz	r3, r3
 974              	.LVL106:
 975 03b4 03F01F03 		and	r3, r3, #31
 976 03b8 0121     		movs	r1, #1
 977 03ba 01FA03F3 		lsl	r3, r1, r3
 978 03be 1342     		tst	r3, r2
 979 03c0 DFD1     		bne	.L76
 980              	.LVL107:
 981              	.L77:
 313:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 314:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 315:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 316:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 317:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 318:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 319:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Require to disable power clock if necessary */
 320:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(pwrclkchanged == SET)
 982              		.loc 1 320 0
 983 03c2 46B1     		cbz	r6, .L56
 321:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 322:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 984              		.loc 1 322 0
 985 03c4 E369     		ldr	r3, [r4, #28]
 986 03c6 23F08053 		bic	r3, r3, #268435456
 987 03ca E361     		str	r3, [r4, #28]
 988 03cc 03E0     		b	.L56
 989              	.LVL108:
 990              	.L74:
 991              	.LBB240:
 992              	.LBB241:
 993              		.loc 2 531 0
 994              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 995 03ce 93FAA3F2 		rbit r2, r3
 996              	@ 0 "" 2
 997              	.LVL109:
 998              		.thumb
 999              	.LBE241:
 1000              	.LBE240:
 310:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1001              		.loc 1 310 0
 1002 03d2 626A     		ldr	r2, [r4, #36]
 1003 03d4 EAE7     		b	.L75
 1004              	.LVL110:
 1005              	.L56:
 1006              	.LBE224:
 323:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 324:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 325:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 326:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 327:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 328:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 329:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 1007              		.loc 1 329 0
 1008 03d6 EB69     		ldr	r3, [r5, #28]
 1009 03d8 0BB9     		cbnz	r3, .L78
 1010              	.LVL111:
 1011              	.L88:
 330:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 331:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if the PLL is used as system clock or not */
 332:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 333:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     { 
 334:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 335:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 336:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the parameters */
 337:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 338:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 339:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 340:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 341:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif
 342:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 344:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 345:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 346:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 347:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 348:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 349:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */
 350:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 351:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 352:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 353:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 354:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 355:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 356:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 358:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 359:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the main PLL clock source, predivider and multiplication factor. */
 360:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 361:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PREDIV,
 362:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 363:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #else
 364:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the main PLL clock source and multiplication factor. */
 365:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 366:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                            RCC_OscInitStruct->PLL.PLLMUL);
 367:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
 368:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable the main PLL. */
 369:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_ENABLE();
 370:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 371:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 372:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 373:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 374:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is ready */
 375:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 376:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 377:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 378:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 379:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 380:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 381:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 382:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 383:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 384:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 385:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 386:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 387:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 388:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 389:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 390:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 391:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */  
 392:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 393:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 394:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 395:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 396:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 398:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 399:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 400:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 401:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 402:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 403:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 404:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 405:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 406:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 407:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 1012              		.loc 1 407 0
 1013 03da 0020     		movs	r0, #0
 1014 03dc 86E0     		b	.L15
 1015              	.LVL112:
 1016              	.L78:
 332:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     { 
 1017              		.loc 1 332 0
 1018 03de 444C     		ldr	r4, .L122
 1019 03e0 6268     		ldr	r2, [r4, #4]
 1020 03e2 02F00C02 		and	r2, r2, #12
 1021 03e6 082A     		cmp	r2, #8
 1022 03e8 3FF436AE 		beq	.L37
 334:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1023              		.loc 1 334 0
 1024 03ec 022B     		cmp	r3, #2
 1025 03ee 4FF08073 		mov	r3, #16777216
 1026 03f2 54D1     		bne	.L79
 1027              	.LVL113:
 1028              	.LBB242:
 1029              	.LBB243:
 1030              		.loc 2 531 0
 1031              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1032 03f4 93FAA3F3 		rbit r3, r3
 1033              	@ 0 "" 2
 1034              	.LVL114:
 1035              		.thumb
 1036              	.LBE243:
 1037              	.LBE242:
 344:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1038              		.loc 1 344 0
 1039 03f8 B3FA83F3 		clz	r3, r3
 1040              	.LVL115:
 1041 03fc 03F18453 		add	r3, r3, #276824064
 1042 0400 03F58413 		add	r3, r3, #1081344
 1043 0404 9B00     		lsls	r3, r3, #2
 1044 0406 0022     		movs	r2, #0
 1045 0408 1A60     		str	r2, [r3]
 347:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1046              		.loc 1 347 0
 1047 040a FFF7FEFF 		bl	HAL_GetTick
 1048              	.LVL116:
 1049 040e 0646     		mov	r6, r0
 1050              	.LVL117:
 1051              	.L80:
 1052              	.LBB244:
 1053              	.LBB245:
 1054              		.loc 2 531 0 discriminator 1
 1055 0410 4FF00073 		mov	r3, #33554432
 1056              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1057 0414 93FAA3F3 		rbit r3, r3
 1058              	@ 0 "" 2
 1059              		.thumb
 1060              	.LBE245:
 1061              	.LBE244:
 1062              	.LBB246:
 1063              	.LBB247:
 1064 0418 4FF00071 		mov	r1, #33554432
 1065              	.LBE247:
 1066              	.LBE246:
 350:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1067              		.loc 1 350 0 discriminator 1
 1068 041c 2368     		ldr	r3, [r4]
 1069              	.LVL118:
 1070              	.LBB249:
 1071              	.LBB248:
 1072              		.loc 2 531 0 discriminator 1
 1073              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1074 041e 91FAA1F1 		rbit r1, r1
 1075              	@ 0 "" 2
 1076              	.LVL119:
 1077              		.thumb
 1078              	.LBE248:
 1079              	.LBE249:
 350:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1080              		.loc 1 350 0 discriminator 1
 1081 0422 B1FA81F1 		clz	r1, r1
 1082              	.LVL120:
 1083 0426 01F01F01 		and	r1, r1, #31
 1084 042a 0122     		movs	r2, #1
 1085 042c 02FA01F1 		lsl	r1, r2, r1
 1086 0430 1942     		tst	r1, r3
 1087 0432 05D0     		beq	.L119
 352:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 1088              		.loc 1 352 0
 1089 0434 FFF7FEFF 		bl	HAL_GetTick
 1090              	.LVL121:
 1091 0438 801B     		subs	r0, r0, r6
 1092 043a 0228     		cmp	r0, #2
 1093 043c E8D9     		bls	.L80
 1094 043e 45E6     		b	.L27
 1095              	.L119:
 365:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                            RCC_OscInitStruct->PLL.PLLMUL);
 1096              		.loc 1 365 0
 1097 0440 6168     		ldr	r1, [r4, #4]
 1098 0442 286A     		ldr	r0, [r5, #32]
 1099 0444 6B6A     		ldr	r3, [r5, #36]
 1100 0446 21F47411 		bic	r1, r1, #3997696
 1101 044a 0343     		orrs	r3, r3, r0
 1102 044c 0B43     		orrs	r3, r3, r1
 1103 044e 6360     		str	r3, [r4, #4]
 1104              	.LVL122:
 1105              	.LBB250:
 1106              	.LBB251:
 1107              		.loc 2 531 0
 1108 0450 4FF08073 		mov	r3, #16777216
 1109              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1110 0454 93FAA3F3 		rbit r3, r3
 1111              	@ 0 "" 2
 1112              	.LVL123:
 1113              		.thumb
 1114              	.LBE251:
 1115              	.LBE250:
 369:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1116              		.loc 1 369 0
 1117 0458 B3FA83F3 		clz	r3, r3
 1118              	.LVL124:
 1119 045c 03F18453 		add	r3, r3, #276824064
 1120 0460 03F58413 		add	r3, r3, #1081344
 1121 0464 9B00     		lsls	r3, r3, #2
 1122 0466 1A60     		str	r2, [r3]
 372:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1123              		.loc 1 372 0
 1124 0468 FFF7FEFF 		bl	HAL_GetTick
 1125              	.LVL125:
 1126 046c 0546     		mov	r5, r0
 1127              	.LVL126:
 1128              	.L84:
 1129              	.LBB252:
 1130              	.LBB253:
 1131              		.loc 2 531 0 discriminator 1
 1132 046e 4FF00073 		mov	r3, #33554432
 1133              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1134 0472 93FAA3F3 		rbit r3, r3
 1135              	@ 0 "" 2
 1136              		.thumb
 1137              	.LBE253:
 1138              	.LBE252:
 1139              	.LBB254:
 1140              	.LBB255:
 1141 0476 4FF00072 		mov	r2, #33554432
 1142              	.LBE255:
 1143              	.LBE254:
 375:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1144              		.loc 1 375 0 discriminator 1
 1145 047a 2368     		ldr	r3, [r4]
 1146              	.LVL127:
 1147              	.LBB257:
 1148              	.LBB256:
 1149              		.loc 2 531 0 discriminator 1
 1150              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1151 047c 92FAA2F2 		rbit r2, r2
 1152              	@ 0 "" 2
 1153              	.LVL128:
 1154              		.thumb
 1155              	.LBE256:
 1156              	.LBE257:
 375:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1157              		.loc 1 375 0 discriminator 1
 1158 0480 B2FA82F2 		clz	r2, r2
 1159              	.LVL129:
 1160 0484 02F01F02 		and	r2, r2, #31
 1161 0488 0121     		movs	r1, #1
 1162 048a 01FA02F2 		lsl	r2, r1, r2
 1163 048e 1A42     		tst	r2, r3
 1164 0490 A3D1     		bne	.L88
 377:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 1165              		.loc 1 377 0
 1166 0492 FFF7FEFF 		bl	HAL_GetTick
 1167              	.LVL130:
 1168 0496 401B     		subs	r0, r0, r5
 1169 0498 0228     		cmp	r0, #2
 1170 049a E8D9     		bls	.L84
 1171 049c 16E6     		b	.L27
 1172              	.LVL131:
 1173              	.L79:
 1174              	.LBB258:
 1175              	.LBB259:
 1176              		.loc 2 531 0
 1177              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1178 049e 93FAA3F3 		rbit r3, r3
 1179              	@ 0 "" 2
 1180              	.LVL132:
 1181              		.thumb
 1182              	.LBE259:
 1183              	.LBE258:
 386:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 1184              		.loc 1 386 0
 1185 04a2 B3FA83F3 		clz	r3, r3
 1186              	.LVL133:
 1187 04a6 03F18453 		add	r3, r3, #276824064
 1188 04aa 03F58413 		add	r3, r3, #1081344
 1189 04ae 9B00     		lsls	r3, r3, #2
 1190 04b0 0022     		movs	r2, #0
 1191 04b2 1A60     		str	r2, [r3]
 389:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1192              		.loc 1 389 0
 1193 04b4 FFF7FEFF 		bl	HAL_GetTick
 1194              	.LVL134:
 1195 04b8 0546     		mov	r5, r0
 1196              	.LVL135:
 1197              	.L89:
 1198              	.LBB260:
 1199              	.LBB261:
 1200              		.loc 2 531 0 discriminator 1
 1201 04ba 4FF00073 		mov	r3, #33554432
 1202              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1203 04be 93FAA3F3 		rbit r3, r3
 1204              	@ 0 "" 2
 1205              		.thumb
 1206              	.LBE261:
 1207              	.LBE260:
 1208              	.LBB262:
 1209              	.LBB263:
 1210 04c2 4FF00072 		mov	r2, #33554432
 1211              	.LBE263:
 1212              	.LBE262:
 392:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1213              		.loc 1 392 0 discriminator 1
 1214 04c6 2368     		ldr	r3, [r4]
 1215              	.LVL136:
 1216              	.LBB265:
 1217              	.LBB264:
 1218              		.loc 2 531 0 discriminator 1
 1219              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1220 04c8 92FAA2F2 		rbit r2, r2
 1221              	@ 0 "" 2
 1222              	.LVL137:
 1223              		.thumb
 1224              	.LBE264:
 1225              	.LBE265:
 392:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1226              		.loc 1 392 0 discriminator 1
 1227 04cc B2FA82F2 		clz	r2, r2
 1228              	.LVL138:
 1229 04d0 02F01F02 		and	r2, r2, #31
 1230 04d4 0121     		movs	r1, #1
 1231 04d6 01FA02F2 		lsl	r2, r1, r2
 1232 04da 1A42     		tst	r2, r3
 1233 04dc 3FF47DAF 		beq	.L88
 394:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 1234              		.loc 1 394 0
 1235 04e0 FFF7FEFF 		bl	HAL_GetTick
 1236              	.LVL139:
 1237 04e4 401B     		subs	r0, r0, r5
 1238 04e6 0228     		cmp	r0, #2
 1239 04e8 E7D9     		bls	.L89
 1240 04ea EFE5     		b	.L27
 1241              	.LVL140:
 1242              	.L15:
 408:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 1243              		.loc 1 408 0
 1244 04ec 03B0     		add	sp, sp, #12
 1245              		@ sp needed
 1246 04ee F0BD     		pop	{r4, r5, r6, r7, pc}
 1247              	.L123:
 1248              		.align	2
 1249              	.L122:
 1250 04f0 00100240 		.word	1073876992
 1251              		.cfi_endproc
 1252              	.LFE126:
 1254              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1255              		.align	1
 1256              		.global	HAL_RCC_ClockConfig
 1257              		.thumb
 1258              		.thumb_func
 1260              	HAL_RCC_ClockConfig:
 1261              	.LFB127:
 409:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 410:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 411:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 412:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 413:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         parameters in the RCC_ClkInitStruct.
 414:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 415:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC peripheral.
 416:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  FLatency FLASH Latency                   
 417:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *          The value of this parameter depend on device used within the same series
 418:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 419:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 420:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 421:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 423:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         of failure of the HSE used directly or indirectly as system clock
 424:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         (if the Clock Security System CSS is enabled).
 425:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *           
 426:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   A switch from one clock source to another occurs only if the target
 427:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 428:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         If a clock source which is not yet ready is selected, the switch will
 429:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         occur when the clock source will be ready. 
 430:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 431:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         currently used as system clock source.
 432:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 433:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 434:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 435:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1262              		.loc 1 435 0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              	.LVL141:
 1267 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1268              	.LCFI1:
 1269              		.cfi_def_cfa_offset 24
 1270              		.cfi_offset 3, -24
 1271              		.cfi_offset 4, -20
 1272              		.cfi_offset 5, -16
 1273              		.cfi_offset 6, -12
 1274              		.cfi_offset 7, -8
 1275              		.cfi_offset 14, -4
 436:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 437:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 438:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_ClkInitStruct != NULL);
 440:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 441:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 442:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 443:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 444:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   must be correctly programmed according to the frequency of the CPU clock 
 445:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     (HCLK) of the device. */
 446:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 447:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 448:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 1276              		.loc 1 448 0
 1277 0002 524B     		ldr	r3, .L174
 1278 0004 1A68     		ldr	r2, [r3]
 1279 0006 02F00702 		and	r2, r2, #7
 1280 000a 9142     		cmp	r1, r2
 435:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 1281              		.loc 1 435 0
 1282 000c 0546     		mov	r5, r0
 1283 000e 0E46     		mov	r6, r1
 1284              		.loc 1 448 0
 1285 0010 0AD8     		bhi	.L125
 1286              	.L128:
 449:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 450:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 451:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 452:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 453:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 454:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 455:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 456:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 457:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 458:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 459:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 460:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 461:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 462:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1287              		.loc 1 462 0
 1288 0012 2B68     		ldr	r3, [r5]
 1289 0014 9907     		lsls	r1, r3, #30
 1290              	.LVL142:
 1291 0016 13D5     		bpl	.L127
 463:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 464:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 465:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1292              		.loc 1 465 0
 1293 0018 4D4A     		ldr	r2, .L174+4
 1294 001a A968     		ldr	r1, [r5, #8]
 1295 001c 5068     		ldr	r0, [r2, #4]
 1296              	.LVL143:
 1297 001e 20F0F000 		bic	r0, r0, #240
 1298 0022 0143     		orrs	r1, r1, r0
 1299 0024 5160     		str	r1, [r2, #4]
 1300 0026 0BE0     		b	.L127
 1301              	.LVL144:
 1302              	.L125:
 451:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 1303              		.loc 1 451 0
 1304 0028 1A68     		ldr	r2, [r3]
 1305 002a 22F00702 		bic	r2, r2, #7
 1306 002e 0A43     		orrs	r2, r2, r1
 1307 0030 1A60     		str	r2, [r3]
 455:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1308              		.loc 1 455 0
 1309 0032 1B68     		ldr	r3, [r3]
 1310 0034 03F00703 		and	r3, r3, #7
 1311 0038 8B42     		cmp	r3, r1
 1312 003a EAD0     		beq	.L128
 1313              	.LVL145:
 1314              	.L136:
 457:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 1315              		.loc 1 457 0
 1316 003c 0120     		movs	r0, #1
 1317 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1318              	.LVL146:
 1319              	.L127:
 466:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 467:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 468:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 469:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1320              		.loc 1 469 0
 1321 0040 DA07     		lsls	r2, r3, #31
 1322 0042 06D4     		bmi	.L130
 1323              	.LVL147:
 1324              	.L144:
 470:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 471:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 472:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 473:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSE is selected as System Clock Source */
 474:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 475:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 476:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSE ready flag */  
 477:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 478:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 479:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 480:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 481:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 482:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* PLL is selected as System Clock Source */
 483:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 484:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 485:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the PLL ready flag */  
 486:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 487:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 488:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 489:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 490:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 491:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSI is selected as System Clock Source */
 492:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 493:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 494:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI ready flag */  
 495:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 496:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 497:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 498:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 499:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 500:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 501:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 502:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get Start Tick */
 503:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 504:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 505:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 506:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 507:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 508:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 509:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 510:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 511:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 512:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 513:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 514:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 515:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 516:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 517:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 518:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 519:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 520:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 521:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 522:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 523:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 524:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 525:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 526:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 527:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 528:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 529:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 530:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 531:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 532:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 533:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 534:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }      
 535:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 536:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 537:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1325              		.loc 1 537 0
 1326 0044 414B     		ldr	r3, .L174
 1327 0046 1A68     		ldr	r2, [r3]
 1328 0048 02F00702 		and	r2, r2, #7
 1329 004c 9642     		cmp	r6, r2
 1330 004e 5BD3     		bcc	.L131
 1331 0050 64E0     		b	.L132
 1332              	.LVL148:
 1333              	.L130:
 474:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1334              		.loc 1 474 0
 1335 0052 6B68     		ldr	r3, [r5, #4]
 1336 0054 3E4C     		ldr	r4, .L174+4
 1337 0056 012B     		cmp	r3, #1
 1338 0058 07D1     		bne	.L133
 1339              	.LVL149:
 1340              	.LBB266:
 1341              	.LBB267:
 1342              		.loc 2 531 0
 1343 005a 4FF40032 		mov	r2, #131072
 1344              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1345 005e 92FAA2F2 		rbit r2, r2
 1346              	@ 0 "" 2
 1347              		.thumb
 1348              	.LBE267:
 1349              	.LBE266:
 1350              	.LBB268:
 1351              	.LBB269:
 1352 0062 4FF40031 		mov	r1, #131072
 1353              	.LBE269:
 1354              	.LBE268:
 477:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1355              		.loc 1 477 0
 1356 0066 2268     		ldr	r2, [r4]
 1357              	.LVL150:
 1358 0068 0EE0     		b	.L171
 1359              	.LVL151:
 1360              	.L133:
 483:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1361              		.loc 1 483 0
 1362 006a 022B     		cmp	r3, #2
 1363 006c 07D1     		bne	.L138
 1364              	.LVL152:
 1365              	.LBB270:
 1366              	.LBB271:
 1367              		.loc 2 531 0
 1368 006e 4FF00072 		mov	r2, #33554432
 1369              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1370 0072 92FAA2F2 		rbit r2, r2
 1371              	@ 0 "" 2
 1372              		.thumb
 1373              	.LBE271:
 1374              	.LBE270:
 1375              	.LBB272:
 1376              	.LBB273:
 1377 0076 4FF00071 		mov	r1, #33554432
 1378              	.LBE273:
 1379              	.LBE272:
 486:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1380              		.loc 1 486 0
 1381 007a 2268     		ldr	r2, [r4]
 1382              	.LVL153:
 1383 007c 04E0     		b	.L171
 1384              	.LVL154:
 1385              	.L138:
 1386              	.LBB274:
 1387              	.LBB275:
 1388              		.loc 2 531 0
 1389 007e 0222     		movs	r2, #2
 1390              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1391 0080 92FAA2F2 		rbit r2, r2
 1392              	@ 0 "" 2
 1393              		.thumb
 1394              	.LBE275:
 1395              	.LBE274:
 495:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1396              		.loc 1 495 0
 1397 0084 2268     		ldr	r2, [r4]
 1398              	.LVL155:
 1399              	.LBB276:
 1400              	.LBB277:
 1401              		.loc 2 531 0
 1402 0086 0221     		movs	r1, #2
 1403              	.LVL156:
 1404              	.L171:
 1405              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1406 0088 91FAA1F1 		rbit r1, r1
 1407              	@ 0 "" 2
 1408              	.LVL157:
 1409              		.thumb
 1410              	.LBE277:
 1411              	.LBE276:
 495:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1412              		.loc 1 495 0
 1413 008c B1FA81F1 		clz	r1, r1
 1414              	.LVL158:
 1415 0090 01F01F01 		and	r1, r1, #31
 1416 0094 0120     		movs	r0, #1
 1417 0096 00FA01F1 		lsl	r1, r0, r1
 1418 009a 1142     		tst	r1, r2
 1419 009c CED0     		beq	.L136
 500:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1420              		.loc 1 500 0
 1421 009e 6268     		ldr	r2, [r4, #4]
 1422 00a0 22F00302 		bic	r2, r2, #3
 1423 00a4 1343     		orrs	r3, r3, r2
 1424 00a6 6360     		str	r3, [r4, #4]
 503:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 1425              		.loc 1 503 0
 1426 00a8 FFF7FEFF 		bl	HAL_GetTick
 1427              	.LVL159:
 505:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1428              		.loc 1 505 0
 1429 00ac 6B68     		ldr	r3, [r5, #4]
 1430 00ae 012B     		cmp	r3, #1
 503:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 1431              		.loc 1 503 0
 1432 00b0 0746     		mov	r7, r0
 1433              	.LVL160:
 505:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1434              		.loc 1 505 0
 1435 00b2 0DD1     		bne	.L143
 1436              	.LVL161:
 1437              	.L146:
 507:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1438              		.loc 1 507 0
 1439 00b4 6368     		ldr	r3, [r4, #4]
 1440 00b6 03F00C03 		and	r3, r3, #12
 1441 00ba 042B     		cmp	r3, #4
 1442 00bc C2D0     		beq	.L144
 509:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1443              		.loc 1 509 0
 1444 00be FFF7FEFF 		bl	HAL_GetTick
 1445              	.LVL162:
 1446 00c2 41F28833 		movw	r3, #5000
 1447 00c6 C01B     		subs	r0, r0, r7
 1448 00c8 9842     		cmp	r0, r3
 1449 00ca F3D9     		bls	.L146
 1450              	.L145:
 511:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 1451              		.loc 1 511 0
 1452 00cc 0320     		movs	r0, #3
 1453 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1454              	.LVL163:
 1455              	.L143:
 515:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1456              		.loc 1 515 0
 1457 00d0 022B     		cmp	r3, #2
 1458 00d2 0BD0     		beq	.L149
 1459              	.LVL164:
 1460              	.L150:
 527:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1461              		.loc 1 527 0
 1462 00d4 6368     		ldr	r3, [r4, #4]
 1463 00d6 13F00C0F 		tst	r3, #12
 1464 00da 0DD1     		bne	.L148
 1465 00dc B2E7     		b	.L144
 1466              	.L173:
 519:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1467              		.loc 1 519 0
 1468 00de FFF7FEFF 		bl	HAL_GetTick
 1469              	.LVL165:
 1470 00e2 41F28833 		movw	r3, #5000
 1471 00e6 C01B     		subs	r0, r0, r7
 1472 00e8 9842     		cmp	r0, r3
 1473 00ea EFD8     		bhi	.L145
 1474              	.L149:
 517:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1475              		.loc 1 517 0
 1476 00ec 6368     		ldr	r3, [r4, #4]
 1477 00ee 03F00C03 		and	r3, r3, #12
 1478 00f2 082B     		cmp	r3, #8
 1479 00f4 F3D1     		bne	.L173
 1480 00f6 A5E7     		b	.L144
 1481              	.L148:
 529:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1482              		.loc 1 529 0
 1483 00f8 FFF7FEFF 		bl	HAL_GetTick
 1484              	.LVL166:
 1485 00fc 41F28833 		movw	r3, #5000
 1486 0100 C01B     		subs	r0, r0, r7
 1487 0102 9842     		cmp	r0, r3
 1488 0104 E6D9     		bls	.L150
 1489 0106 E1E7     		b	.L145
 1490              	.LVL167:
 1491              	.L131:
 538:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 539:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 540:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1492              		.loc 1 540 0
 1493 0108 1A68     		ldr	r2, [r3]
 1494 010a 22F00702 		bic	r2, r2, #7
 1495 010e 3243     		orrs	r2, r2, r6
 1496 0110 1A60     		str	r2, [r3]
 541:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 542:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 543:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 544:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1497              		.loc 1 544 0
 1498 0112 1B68     		ldr	r3, [r3]
 1499 0114 03F00703 		and	r3, r3, #7
 1500 0118 B342     		cmp	r3, r6
 1501 011a 8FD1     		bne	.L136
 1502              	.L132:
 545:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 546:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 547:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 548:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 549:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 550:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 551:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1503              		.loc 1 551 0
 1504 011c 2868     		ldr	r0, [r5]
 1505 011e 4307     		lsls	r3, r0, #29
 1506 0120 06D5     		bpl	.L152
 552:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 553:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 554:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1507              		.loc 1 554 0
 1508 0122 0B4B     		ldr	r3, .L174+4
 1509 0124 EA68     		ldr	r2, [r5, #12]
 1510 0126 5968     		ldr	r1, [r3, #4]
 1511 0128 21F4E061 		bic	r1, r1, #1792
 1512 012c 0A43     		orrs	r2, r2, r1
 1513 012e 5A60     		str	r2, [r3, #4]
 1514              	.L152:
 555:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 556:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 557:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 558:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1515              		.loc 1 558 0
 1516 0130 10F00800 		ands	r0, r0, #8
 1517 0134 08D0     		beq	.L129
 559:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 560:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 561:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 1518              		.loc 1 561 0
 1519 0136 064B     		ldr	r3, .L174+4
 1520 0138 2969     		ldr	r1, [r5, #16]
 1521 013a 5A68     		ldr	r2, [r3, #4]
 1522 013c 22F46052 		bic	r2, r2, #14336
 1523 0140 42EAC102 		orr	r2, r2, r1, lsl #3
 1524 0144 5A60     		str	r2, [r3, #4]
 562:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 563:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 564:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Update the SystemCoreClock global variable */
 565:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_
 566:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 567:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the source of time base considering new system clocks settings*/
 568:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //HAL_InitTick (TICK_INT_PRIORITY);
 569:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 570:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 1525              		.loc 1 570 0
 1526 0146 0020     		movs	r0, #0
 1527              	.L129:
 571:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 1528              		.loc 1 571 0
 1529 0148 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1530              	.LVL168:
 1531              	.L175:
 1532 014a 00BF     		.align	2
 1533              	.L174:
 1534 014c 00200240 		.word	1073881088
 1535 0150 00100240 		.word	1073876992
 1536              		.cfi_endproc
 1537              	.LFE127:
 1539              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1540              		.align	1
 1541              		.global	HAL_RCC_GetPCLK2Freq
 1542              		.thumb
 1543              		.thumb_func
 1545              	HAL_RCC_GetPCLK2Freq:
 1546              	.LFB128:
 572:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 573:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 574:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Returns the PCLK2 frequency
 575:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 576:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 577:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval PCLK2 frequency
 578:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 579:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 580:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1547              		.loc 1 580 0
 1548              		.cfi_startproc
 1549              		@ args = 0, pretend = 0, frame = 0
 1550              		@ frame_needed = 0, uses_anonymous_args = 0
 1551              		@ link register save eliminated.
 581:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 582:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_C
 583:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return 7372800;
 584:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 1552              		.loc 1 584 0
 1553 0000 4FF4E100 		mov	r0, #7372800
 1554 0004 7047     		bx	lr
 1555              		.cfi_endproc
 1556              	.LFE128:
 1558              		.section	.text.HAL_GPIO_Init,"ax",%progbits
 1559              		.align	1
 1560              		.global	HAL_GPIO_Init
 1561              		.thumb
 1562              		.thumb_func
 1564              	HAL_GPIO_Init:
 1565              	.LFB129:
 585:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 586:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 587:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 588:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE             (0x00000003U)
 589:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define EXTI_MODE             (0x10000000U)
 590:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_IT          (0x00010000U)
 591:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_EVT         (0x00020000U)
 592:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RISING_EDGE           (0x00100000U)
 593:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define FALLING_EDGE          (0x00200000U)
 594:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_OUTPUT_TYPE      (0x00000010U)
 595:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 596:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_NUMBER           (16U)
 597:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 598:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define __HAL_RCC_GPIOA_CLK_ENABLE()   do { \
 599:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         __IO uint32_t tmpreg; \
 600:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 601:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         /* Delay after an RCC peripheral clock enabling */ \
 602:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 603:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         UNUSED(tmpreg); \
 604:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                       } while(0U)
 605:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 606:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 607:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 608:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initialize the GPIOx peripheral according to the specified parameters in the GPIO_Init.
 609:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family devices
 610:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 611:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the configuration information for the specified GPIO peripheral.
 612:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 613:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 614:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
 615:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1566              		.loc 1 615 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 8
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              	.LVL169:
 1571 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 1572              	.LCFI2:
 1573              		.cfi_def_cfa_offset 40
 1574              		.cfi_offset 0, -40
 1575              		.cfi_offset 1, -36
 1576              		.cfi_offset 4, -32
 1577              		.cfi_offset 5, -28
 1578              		.cfi_offset 6, -24
 1579              		.cfi_offset 7, -20
 1580              		.cfi_offset 8, -16
 1581              		.cfi_offset 9, -12
 1582              		.cfi_offset 10, -8
 1583              		.cfi_offset 14, -4
 616:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t position = 0x00U;
 617:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t iocurrent = 0x00U;
 618:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t temp = 0x00U;
 619:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 620:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 621:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 622:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 623:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 624:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 625:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 626:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the port pins */
 627:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   while (((GPIO_Init->Pin) >> position) != RESET)
 1584              		.loc 1 627 0
 1585 0004 0F68     		ldr	r7, [r1]
 616:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t position = 0x00U;
 1586              		.loc 1 616 0
 1587 0006 0023     		movs	r3, #0
 1588              	.LVL170:
 1589              	.L178:
 1590              		.loc 1 627 0 discriminator 1
 1591 0008 37FA03F2 		lsrs	r2, r7, r3
 1592 000c 00F0B980 		beq	.L201
 628:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 629:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get current io position */
 630:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     iocurrent = (GPIO_Init->Pin) & (1U << position);
 1593              		.loc 1 630 0
 1594 0010 4FF00108 		mov	r8, #1
 1595 0014 08FA03F8 		lsl	r8, r8, r3
 1596              	.LVL171:
 631:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 632:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(iocurrent)
 1597              		.loc 1 632 0
 1598 0018 18EA0705 		ands	r5, r8, r7
 1599              	.LVL172:
 1600 001c 00F0AF80 		beq	.L180
 633:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 634:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- GPIO Mode Configuration ------------------------*/
 635:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Alternate function mode selection */
 636:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 1601              		.loc 1 636 0
 1602 0020 4C68     		ldr	r4, [r1, #4]
 1603 0022 24F01006 		bic	r6, r4, #16
 1604 0026 022E     		cmp	r6, #2
 1605 0028 16D1     		bne	.L181
 637:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 638:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Alternate function parameters */
 639:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 640:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 641:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 642:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure Alternate function mapped with the current IO */
 643:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->AFR[position >> 3];
 1606              		.loc 1 643 0
 1607 002a 4FEAD30C 		lsr	ip, r3, #3
 1608 002e 00EB8C0C 		add	ip, r0, ip, lsl #2
 644:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 1609              		.loc 1 644 0
 1610 0032 03F00709 		and	r9, r3, #7
 643:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 1611              		.loc 1 643 0
 1612 0036 DCF82020 		ldr	r2, [ip, #32]
 1613              	.LVL173:
 1614              		.loc 1 644 0
 1615 003a 4FEA8909 		lsl	r9, r9, #2
 1616 003e 4FF00F0A 		mov	r10, #15
 1617 0042 0AFA09FA 		lsl	r10, r10, r9
 1618 0046 22EA0A0A 		bic	r10, r2, r10
 1619              	.LVL174:
 645:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 1620              		.loc 1 645 0
 1621 004a 0A69     		ldr	r2, [r1, #16]
 1622 004c 02FA09F9 		lsl	r9, r2, r9
 1623 0050 4AEA0902 		orr	r2, r10, r9
 1624              	.LVL175:
 646:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->AFR[position >> 3] = temp;
 1625              		.loc 1 646 0
 1626 0054 CCF82020 		str	r2, [ip, #32]
 1627              	.LVL176:
 1628              	.L181:
 1629 0058 5A00     		lsls	r2, r3, #1
 647:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 648:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 649:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 650:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->MODER;
 651:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 1630              		.loc 1 651 0
 1631 005a 4FF0030C 		mov	ip, #3
 650:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 1632              		.loc 1 650 0
 1633 005e D0F800A0 		ldr	r10, [r0]
 1634              	.LVL177:
 1635              		.loc 1 651 0
 1636 0062 0CFA02FC 		lsl	ip, ip, r2
 1637 0066 6FEA0C0C 		mvn	ip, ip
 652:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1638              		.loc 1 652 0
 1639 006a 04F00309 		and	r9, r4, #3
 651:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1640              		.loc 1 651 0
 1641 006e 0CEA0A0A 		and	r10, ip, r10
 1642              	.LVL178:
 1643              		.loc 1 652 0
 1644 0072 09FA02F9 		lsl	r9, r9, r2
 653:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 654:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 655:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Output or Alternate function mode selection */
 656:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 1645              		.loc 1 656 0
 1646 0076 013E     		subs	r6, r6, #1
 652:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1647              		.loc 1 652 0
 1648 0078 4AEA0909 		orr	r9, r10, r9
 1649              	.LVL179:
 1650              		.loc 1 656 0
 1651 007c 012E     		cmp	r6, #1
 653:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1652              		.loc 1 653 0
 1653 007e C0F80090 		str	r9, [r0]
 1654              		.loc 1 656 0
 1655 0082 10D8     		bhi	.L182
 657:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 658:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 659:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Speed parameter */
 660:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 661:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Speed */
 662:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OSPEEDR;
 1656              		.loc 1 662 0
 1657 0084 8668     		ldr	r6, [r0, #8]
 1658              	.LVL180:
 663:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 1659              		.loc 1 663 0
 1660 0086 0CEA0609 		and	r9, ip, r6
 1661              	.LVL181:
 664:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_Init->Speed << (position * 2U));
 1662              		.loc 1 664 0
 1663 008a CE68     		ldr	r6, [r1, #12]
 1664 008c 9640     		lsls	r6, r6, r2
 1665 008e 49EA0606 		orr	r6, r9, r6
 1666              	.LVL182:
 665:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 1667              		.loc 1 665 0
 1668 0092 8660     		str	r6, [r0, #8]
 666:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 667:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Output Type */
 668:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OTYPER;
 1669              		.loc 1 668 0
 1670 0094 4668     		ldr	r6, [r0, #4]
 1671              	.LVL183:
 669:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 1672              		.loc 1 669 0
 1673 0096 26EA0808 		bic	r8, r6, r8
 1674              	.LVL184:
 670:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 1675              		.loc 1 670 0
 1676 009a C4F30016 		ubfx	r6, r4, #4, #1
 1677 009e 9E40     		lsls	r6, r6, r3
 1678 00a0 48EA0606 		orr	r6, r8, r6
 1679              	.LVL185:
 671:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OTYPER = temp;
 1680              		.loc 1 671 0
 1681 00a4 4660     		str	r6, [r0, #4]
 1682              	.LVL186:
 1683              	.L182:
 672:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 673:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 674:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Activate the Pull-up or Pull down resistor for the current IO */
 675:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->PUPDR;
 1684              		.loc 1 675 0
 1685 00a6 C668     		ldr	r6, [r0, #12]
 1686              	.LVL187:
 676:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 1687              		.loc 1 676 0
 1688 00a8 0CEA060C 		and	ip, ip, r6
 1689              	.LVL188:
 677:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Pull) << (position * 2U));
 1690              		.loc 1 677 0
 1691 00ac 8E68     		ldr	r6, [r1, #8]
 1692 00ae 9640     		lsls	r6, r6, r2
 1693 00b0 4CEA0602 		orr	r2, ip, r6
 1694              	.LVL189:
 678:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->PUPDR = temp;
 1695              		.loc 1 678 0
 1696 00b4 C260     		str	r2, [r0, #12]
 679:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 680:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- EXTI Mode Configuration ------------------------*/
 681:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the External Interrupt or event for the current IO */
 682:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 1697              		.loc 1 682 0
 1698 00b6 E200     		lsls	r2, r4, #3
 1699              	.LVL190:
 1700 00b8 61D5     		bpl	.L180
 1701              	.LBB278:
 683:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 684:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable SYSCFG Clock */
 685:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_SYSCFG_CLK_ENABLE();
 1702              		.loc 1 685 0
 1703 00ba 334A     		ldr	r2, .L202
 1704 00bc 9669     		ldr	r6, [r2, #24]
 1705 00be 46F00106 		orr	r6, r6, #1
 1706 00c2 9661     		str	r6, [r2, #24]
 1707              	.LVL191:
 1708 00c4 9269     		ldr	r2, [r2, #24]
 1709 00c6 02F00102 		and	r2, r2, #1
 1710 00ca 0192     		str	r2, [sp, #4]
 1711 00cc 019A     		ldr	r2, [sp, #4]
 1712 00ce 23F00302 		bic	r2, r3, #3
 1713 00d2 02F18042 		add	r2, r2, #1073741824
 1714 00d6 02F58032 		add	r2, r2, #65536
 1715              	.LBE278:
 686:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 687:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = SYSCFG->EXTICR[position >> 2];
 688:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 1716              		.loc 1 688 0
 1717 00da 03F0030C 		and	ip, r3, #3
 687:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 1718              		.loc 1 687 0
 1719 00de 9668     		ldr	r6, [r2, #8]
 1720              	.LVL192:
 1721              		.loc 1 688 0
 1722 00e0 4FEA8C0C 		lsl	ip, ip, #2
 1723 00e4 4FF00F08 		mov	r8, #15
 1724 00e8 08FA0CF8 		lsl	r8, r8, ip
 689:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 1725              		.loc 1 689 0
 1726 00ec B0F1904F 		cmp	r0, #1207959552
 688:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 1727              		.loc 1 688 0
 1728 00f0 26EA0808 		bic	r8, r6, r8
 1729              	.LVL193:
 1730              		.loc 1 689 0
 1731 00f4 0DD0     		beq	.L194
 1732              		.loc 1 689 0 is_stmt 0 discriminator 1
 1733 00f6 254E     		ldr	r6, .L202+4
 1734 00f8 B042     		cmp	r0, r6
 1735 00fa 0CD0     		beq	.L195
 1736 00fc 06F58066 		add	r6, r6, #1024
 1737 0100 B042     		cmp	r0, r6
 1738 0102 0AD0     		beq	.L196
 1739 0104 06F58066 		add	r6, r6, #1024
 1740 0108 B042     		cmp	r0, r6
 1741 010a 14BF     		ite	ne
 1742 010c 0526     		movne	r6, #5
 1743 010e 0326     		moveq	r6, #3
 1744 0110 04E0     		b	.L184
 1745              	.L194:
 1746              		.loc 1 689 0
 1747 0112 0026     		movs	r6, #0
 1748 0114 02E0     		b	.L184
 1749              	.L195:
 1750 0116 0126     		movs	r6, #1
 1751 0118 00E0     		b	.L184
 1752              	.L196:
 1753 011a 0226     		movs	r6, #2
 1754              	.L184:
 1755              		.loc 1 689 0 discriminator 3
 1756 011c 06FA0CF6 		lsl	r6, r6, ip
 1757 0120 46EA0806 		orr	r6, r6, r8
 1758              	.LVL194:
 690:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 1759              		.loc 1 690 0 is_stmt 1 discriminator 3
 1760 0124 9660     		str	r6, [r2, #8]
 691:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 692:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear EXTI line configuration */
 693:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->IMR;
 1761              		.loc 1 693 0 discriminator 3
 1762 0126 1A4A     		ldr	r2, .L202+8
 1763 0128 D2F800C0 		ldr	ip, [r2]
 1764              	.LVL195:
 694:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1765              		.loc 1 694 0 discriminator 3
 1766 012c EE43     		mvns	r6, r5
 1767              	.LVL196:
 695:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 1768              		.loc 1 695 0 discriminator 3
 1769 012e 14F4803F 		tst	r4, #65536
 696:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 697:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 1770              		.loc 1 697 0 discriminator 3
 1771 0132 14BF     		ite	ne
 1772 0134 45EA0C0C 		orrne	ip, r5, ip
 1773              	.LVL197:
 694:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 1774              		.loc 1 694 0 discriminator 3
 1775 0138 06EA0C0C 		andeq	ip, r6, ip
 1776              	.LVL198:
 698:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 699:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->IMR = temp;
 1777              		.loc 1 699 0 discriminator 3
 1778 013c C2F800C0 		str	ip, [r2]
 700:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 701:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->EMR;
 1779              		.loc 1 701 0 discriminator 3
 1780 0140 D2F804C0 		ldr	ip, [r2, #4]
 1781              	.LVL199:
 702:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 703:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 1782              		.loc 1 703 0 discriminator 3
 1783 0144 14F4003F 		tst	r4, #131072
 704:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 705:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 1784              		.loc 1 705 0 discriminator 3
 1785 0148 14BF     		ite	ne
 1786 014a 45EA0C0C 		orrne	ip, r5, ip
 1787              	.LVL200:
 702:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1788              		.loc 1 702 0 discriminator 3
 1789 014e 06EA0C0C 		andeq	ip, r6, ip
 1790              	.LVL201:
 706:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 707:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->EMR = temp;
 1791              		.loc 1 707 0 discriminator 3
 1792 0152 C2F804C0 		str	ip, [r2, #4]
 708:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 709:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear Rising Falling edge configuration */
 710:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->RTSR;
 1793              		.loc 1 710 0 discriminator 3
 1794 0156 D2F808C0 		ldr	ip, [r2, #8]
 1795              	.LVL202:
 711:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 712:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 1796              		.loc 1 712 0 discriminator 3
 1797 015a 14F4801F 		tst	r4, #1048576
 713:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 714:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 1798              		.loc 1 714 0 discriminator 3
 1799 015e 14BF     		ite	ne
 1800 0160 45EA0C0C 		orrne	ip, r5, ip
 1801              	.LVL203:
 711:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1802              		.loc 1 711 0 discriminator 3
 1803 0164 06EA0C0C 		andeq	ip, r6, ip
 1804              	.LVL204:
 715:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 716:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->RTSR = temp;
 1805              		.loc 1 716 0 discriminator 3
 1806 0168 C2F808C0 		str	ip, [r2, #8]
 717:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 718:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->FTSR;
 1807              		.loc 1 718 0 discriminator 3
 1808 016c D2F80CC0 		ldr	ip, [r2, #12]
 1809              	.LVL205:
 719:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 720:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 1810              		.loc 1 720 0 discriminator 3
 1811 0170 A402     		lsls	r4, r4, #10
 719:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 1812              		.loc 1 719 0 discriminator 3
 1813 0172 54BF     		ite	pl
 1814 0174 06EA0C05 		andpl	r5, r6, ip
 1815              	.LVL206:
 721:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 722:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 1816              		.loc 1 722 0 discriminator 3
 1817 0178 45EA0C05 		orrmi	r5, r5, ip
 1818              	.LVL207:
 723:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 724:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->FTSR = temp;
 1819              		.loc 1 724 0 discriminator 3
 1820 017c D560     		str	r5, [r2, #12]
 1821              	.LVL208:
 1822              	.L180:
 725:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 726:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 727:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 728:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     position++;
 1823              		.loc 1 728 0
 1824 017e 0133     		adds	r3, r3, #1
 1825              	.LVL209:
 1826 0180 42E7     		b	.L178
 1827              	.LVL210:
 1828              	.L201:
 729:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 730:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 1829              		.loc 1 730 0
 1830 0182 02B0     		add	sp, sp, #8
 1831              		@ sp needed
 1832 0184 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1833              	.L203:
 1834              		.align	2
 1835              	.L202:
 1836 0188 00100240 		.word	1073876992
 1837 018c 00040048 		.word	1207960576
 1838 0190 00040140 		.word	1073808384
 1839              		.cfi_endproc
 1840              	.LFE129:
 1842              		.section	.text.HAL_GPIO_WritePin,"ax",%progbits
 1843              		.align	1
 1844              		.global	HAL_GPIO_WritePin
 1845              		.thumb
 1846              		.thumb_func
 1848              	HAL_GPIO_WritePin:
 1849              	.LFB130:
 731:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 732:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 733:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Set or clear the selected data port bit.
 734:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 735:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   This function uses GPIOx_BSRR and GPIOx_BRR registers to allow atomic read/modify
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         accesses. In this way, there is no risk of an IRQ occurring between
 737:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the read and the modify access.
 738:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 739:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 740:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 741:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
 742:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  PinState: specifies the value to be written to the selected bit.
 743:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of the GPIO_PinState enum values:
 744:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_RESET: to clear the port pin
 745:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_SET: to set the port pin
 746:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 747:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 748:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 749:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1850              		.loc 1 749 0
 1851              		.cfi_startproc
 1852              		@ args = 0, pretend = 0, frame = 0
 1853              		@ frame_needed = 0, uses_anonymous_args = 0
 1854              		@ link register save eliminated.
 1855              	.LVL211:
 750:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 751:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 752:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN_ACTION(PinState));
 753:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 754:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(PinState != GPIO_PIN_RESET)
 1856              		.loc 1 754 0
 1857 0000 0AB1     		cbz	r2, .L205
 755:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 756:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BSRR = (uint32_t)GPIO_Pin;
 1858              		.loc 1 756 0
 1859 0002 8161     		str	r1, [r0, #24]
 1860 0004 7047     		bx	lr
 1861              	.L205:
 757:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 758:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 759:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 760:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BRR = (uint32_t)GPIO_Pin;
 1862              		.loc 1 760 0
 1863 0006 8162     		str	r1, [r0, #40]
 1864 0008 7047     		bx	lr
 1865              		.cfi_endproc
 1866              	.LFE130:
 1868              		.section	.text.HAL_GPIO_TogglePin,"ax",%progbits
 1869              		.align	1
 1870              		.global	HAL_GPIO_TogglePin
 1871              		.thumb
 1872              		.thumb_func
 1874              	HAL_GPIO_TogglePin:
 1875              	.LFB131:
 761:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 762:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 763:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 764:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
 765:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1876              		.loc 1 765 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881              	.LVL212:
 766:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 767:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 768:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 769:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   GPIOx->ODR ^= GPIO_Pin;
 1882              		.loc 1 769 0
 1883 0000 4369     		ldr	r3, [r0, #20]
 1884 0002 5940     		eors	r1, r1, r3
 1885              	.LVL213:
 1886 0004 4161     		str	r1, [r0, #20]
 1887 0006 7047     		bx	lr
 1888              		.cfi_endproc
 1889              	.LFE131:
 1891              		.section	.text.UART_SetConfig,"ax",%progbits
 1892              		.align	1
 1893              		.global	UART_SetConfig
 1894              		.thumb
 1895              		.thumb_func
 1897              	UART_SetConfig:
 1898              	.LFB132:
 770:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 771:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 772:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 773:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Configure the UART peripheral.
 774:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 775:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 776:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 777:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
 778:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1899              		.loc 1 778 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              	.LVL214:
 1904 0000 30B5     		push	{r4, r5, lr}
 1905              	.LCFI3:
 1906              		.cfi_def_cfa_offset 12
 1907              		.cfi_offset 4, -12
 1908              		.cfi_offset 5, -8
 1909              		.cfi_offset 14, -4
 779:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tmpreg                     = 0x00000000U;
 780:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 781:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t brrtemp                    = 0x0000U;
 782:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t usartdiv                   = 0x0000U;
 783:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 784:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 785:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 786:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 787:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 788:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 789:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
 790:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
 791:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 792:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 793:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 794:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 795:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 796:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
 797:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
 798:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  the UART Word Length, Parity, Mode and oversampling:
 799:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set the M bits according to huart->Init.WordLength value
 800:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set PCE and PS bits according to huart->Init.Parity value
 801:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set TE and RE bits according to huart->Init.Mode value
 802:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set OVER8 bit according to huart->Init.OverSampling value */
 803:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 1910              		.loc 1 803 0
 1911 0002 8168     		ldr	r1, [r0, #8]
 1912 0004 0469     		ldr	r4, [r0, #16]
 804:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 1913              		.loc 1 804 0
 1914 0006 0368     		ldr	r3, [r0]
 803:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 1915              		.loc 1 803 0
 1916 0008 C269     		ldr	r2, [r0, #28]
 1917              	.LVL215:
 1918              		.loc 1 804 0
 1919 000a 1D68     		ldr	r5, [r3]
 803:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 1920              		.loc 1 803 0
 1921 000c 0C43     		orrs	r4, r4, r1
 1922 000e 4169     		ldr	r1, [r0, #20]
 1923 0010 2143     		orrs	r1, r1, r4
 1924 0012 41EA0204 		orr	r4, r1, r2
 1925              		.loc 1 804 0
 1926 0016 4249     		ldr	r1, .L242
 1927 0018 2940     		ands	r1, r1, r5
 1928 001a 2143     		orrs	r1, r1, r4
 1929 001c 1960     		str	r1, [r3]
 1930              	.LVL216:
 805:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 806:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
 807:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
 808:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * to huart->Init.StopBits value */
 809:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 1931              		.loc 1 809 0
 1932 001e 5C68     		ldr	r4, [r3, #4]
 1933 0020 C168     		ldr	r1, [r0, #12]
 1934 0022 24F44054 		bic	r4, r4, #12288
 1935 0026 2143     		orrs	r1, r1, r4
 1936 0028 5960     		str	r1, [r3, #4]
 1937              	.LVL217:
 810:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 811:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
 812:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure
 813:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - UART HardWare Flow Control: set CTSE and RTSE bits according
 814:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.HwFlowCtl value
 815:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - one-bit sampling method versus three samples' majority rule according
 816:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.OneBitSampling */
 817:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 818:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 1938              		.loc 1 818 0
 1939 002a 9D68     		ldr	r5, [r3, #8]
 817:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 1940              		.loc 1 817 0
 1941 002c 046A     		ldr	r4, [r0, #32]
 1942 002e 8169     		ldr	r1, [r0, #24]
 1943              		.loc 1 818 0
 1944 0030 25F43065 		bic	r5, r5, #2816
 817:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 1945              		.loc 1 817 0
 1946 0034 2143     		orrs	r1, r1, r4
 1947              	.LVL218:
 1948              		.loc 1 818 0
 1949 0036 2943     		orrs	r1, r1, r5
 1950              	.LVL219:
 1951 0038 9960     		str	r1, [r3, #8]
 1952              	.LVL220:
 819:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 820:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
 821:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 1953              		.loc 1 821 0
 1954 003a 3A49     		ldr	r1, .L242+4
 1955 003c 8B42     		cmp	r3, r1
 1956 003e 0AD1     		bne	.L209
 1957              		.loc 1 821 0 is_stmt 0 discriminator 1
 1958 0040 01F55841 		add	r1, r1, #55296
 1959 0044 384C     		ldr	r4, .L242+8
 1960 0046 096B     		ldr	r1, [r1, #48]
 1961 0048 01F00301 		and	r1, r1, #3
 822:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 823:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check UART Over Sampling to set Baud Rate Register */
 824:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 1962              		.loc 1 824 0 is_stmt 1 discriminator 1
 1963 004c B2F5004F 		cmp	r2, #32768
 1964 0050 615C     		ldrb	r1, [r4, r1]	@ zero_extendqisi2
 1965              	.LVL221:
 1966 0052 35D1     		bne	.L234
 1967 0054 07E0     		b	.L241
 1968              	.LVL222:
 1969              	.L209:
 821:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1970              		.loc 1 821 0 discriminator 2
 1971 0056 3549     		ldr	r1, .L242+12
 1972 0058 8B42     		cmp	r3, r1
 1973 005a 14D0     		beq	.L212
 1974 005c 01F58061 		add	r1, r1, #1024
 1975 0060 8B42     		cmp	r3, r1
 1976 0062 21D1     		bne	.L235
 1977 0064 0FE0     		b	.L212
 1978              	.LVL223:
 1979              	.L241:
 825:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 826:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 1980              		.loc 1 826 0
 1981 0066 0829     		cmp	r1, #8
 1982 0068 21D8     		bhi	.L230
 1983 006a DFE801F0 		tbb	[pc, r1]
 1984              	.L216:
 1985 006e 0F       		.byte	(.L219-.L216)/2
 1986 006f 0F       		.byte	(.L219-.L216)/2
 1987 0070 05       		.byte	(.L218-.L216)/2
 1988 0071 20       		.byte	(.L230-.L216)/2
 1989 0072 0F       		.byte	(.L219-.L216)/2
 1990 0073 20       		.byte	(.L230-.L216)/2
 1991 0074 20       		.byte	(.L230-.L216)/2
 1992 0075 20       		.byte	(.L230-.L216)/2
 1993 0076 14       		.byte	(.L220-.L216)/2
 1994 0077 00       		.p2align 1
 1995              	.L218:
 827:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 828:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 829:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 830:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 831:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 832:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 833:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 834:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 835:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 1996              		.loc 1 835 0
 1997 0078 4168     		ldr	r1, [r0, #4]
 1998              	.LVL224:
 1999 007a 4A08     		lsrs	r2, r1, #1
 2000 007c 02F1F472 		add	r2, r2, #31981568
 2001 0080 02F59042 		add	r2, r2, #18432
 2002 0084 0BE0     		b	.L237
 2003              	.LVL225:
 2004              	.L212:
 824:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2005              		.loc 1 824 0
 2006 0086 B2F5004F 		cmp	r2, #32768
 2007 008a 22D1     		bne	.L222
 2008              	.LVL226:
 2009              	.L219:
 836:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 837:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 838:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 2010              		.loc 1 838 0
 2011 008c 4168     		ldr	r1, [r0, #4]
 2012 008e 4A08     		lsrs	r2, r1, #1
 2013 0090 02F56102 		add	r2, r2, #14745600
 2014 0094 03E0     		b	.L237
 2015              	.LVL227:
 2016              	.L220:
 839:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 840:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 841:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 2017              		.loc 1 841 0
 2018 0096 4168     		ldr	r1, [r0, #4]
 2019              	.LVL228:
 2020 0098 4A08     		lsrs	r2, r1, #1
 2021 009a 02F58032 		add	r2, r2, #65536
 2022              	.L237:
 2023 009e B2FBF1F2 		udiv	r2, r2, r1
 2024 00a2 92B2     		uxth	r2, r2
 2025              	.LVL229:
 783:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2026              		.loc 1 783 0
 2027 00a4 0020     		movs	r0, #0
 2028              	.LVL230:
 842:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 2029              		.loc 1 842 0
 2030 00a6 04E0     		b	.L214
 2031              	.LVL231:
 2032              	.L235:
 824:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2033              		.loc 1 824 0
 2034 00a8 B2F5004F 		cmp	r2, #32768
 2035 00ac 36D1     		bne	.L238
 2036              	.LVL232:
 2037              	.L230:
 843:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 844:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 845:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 2038              		.loc 1 845 0
 2039 00ae 0120     		movs	r0, #1
 2040              	.LVL233:
 782:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 2041              		.loc 1 782 0
 2042 00b0 0022     		movs	r2, #0
 2043              	.LVL234:
 2044              	.L214:
 846:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 847:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 848:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 849:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp = usartdiv & 0xFFF0U;
 2045              		.loc 1 849 0
 2046 00b2 22F00F01 		bic	r1, r2, #15
 2047              	.LVL235:
 850:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 2048              		.loc 1 850 0
 2049 00b6 C2F34202 		ubfx	r2, r2, #1, #3
 2050              	.LVL236:
 851:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Instance->BRR = brrtemp;
 2051              		.loc 1 851 0
 2052 00ba 0A43     		orrs	r2, r2, r1
 2053 00bc DA60     		str	r2, [r3, #12]
 2054 00be 30BD     		pop	{r4, r5, pc}
 2055              	.LVL237:
 2056              	.L234:
 852:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 853:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 854:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 855:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 2057              		.loc 1 855 0
 2058 00c0 0829     		cmp	r1, #8
 2059 00c2 2BD8     		bhi	.L238
 2060 00c4 DFE801F0 		tbb	[pc, r1]
 2061              	.L223:
 2062 00c8 05       		.byte	(.L222-.L223)/2
 2063 00c9 1A       		.byte	(.L226-.L223)/2
 2064 00ca 0E       		.byte	(.L225-.L223)/2
 2065 00cb 2A       		.byte	(.L238-.L223)/2
 2066 00cc 1A       		.byte	(.L226-.L223)/2
 2067 00cd 2A       		.byte	(.L238-.L223)/2
 2068 00ce 2A       		.byte	(.L238-.L223)/2
 2069 00cf 2A       		.byte	(.L238-.L223)/2
 2070 00d0 1F       		.byte	(.L227-.L223)/2
 2071              	.LVL238:
 2072 00d1 00       		.p2align 1
 2073              	.L222:
 856:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 857:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 858:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.B
 2074              		.loc 1 858 0
 2075 00d2 4268     		ldr	r2, [r0, #4]
 2076 00d4 5108     		lsrs	r1, r2, #1
 2077 00d6 01F5E101 		add	r1, r1, #7372800
 2078 00da B1FBF2F2 		udiv	r2, r1, r2
 2079 00de 92B2     		uxth	r2, r2
 2080 00e0 DA60     		str	r2, [r3, #12]
 2081 00e2 19E0     		b	.L240
 2082              	.LVL239:
 2083              	.L225:
 859:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 860:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.B
 862:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 863:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 864:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 2084              		.loc 1 864 0
 2085 00e4 4268     		ldr	r2, [r0, #4]
 2086 00e6 0F49     		ldr	r1, .L242+4
 2087              	.LVL240:
 2088 00e8 5308     		lsrs	r3, r2, #1
 2089 00ea 03F57403 		add	r3, r3, #15990784
 2090 00ee 03F51053 		add	r3, r3, #9216
 2091 00f2 B3FBF2F3 		udiv	r3, r3, r2
 2092 00f6 9BB2     		uxth	r3, r3
 2093 00f8 CB60     		str	r3, [r1, #12]
 2094 00fa 0DE0     		b	.L240
 2095              	.LVL241:
 2096              	.L226:
 865:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 866:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 867:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Ini
 2097              		.loc 1 867 0
 2098 00fc 4368     		ldr	r3, [r0, #4]
 2099 00fe 5A08     		lsrs	r2, r3, #1
 2100 0100 02F5E102 		add	r2, r2, #7372800
 2101 0104 03E0     		b	.L239
 2102              	.L227:
 868:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 869:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 870:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 2103              		.loc 1 870 0
 2104 0106 4368     		ldr	r3, [r0, #4]
 2105 0108 5A08     		lsrs	r2, r3, #1
 2106 010a 02F50042 		add	r2, r2, #32768
 2107              	.L239:
 2108 010e B2FBF3F3 		udiv	r3, r2, r3
 2109 0112 044A     		ldr	r2, .L242+4
 2110 0114 9BB2     		uxth	r3, r3
 2111 0116 D360     		str	r3, [r2, #12]
 2112              	.LVL242:
 2113              	.L240:
 783:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2114              		.loc 1 783 0
 2115 0118 0020     		movs	r0, #0
 2116              	.LVL243:
 871:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 2117              		.loc 1 871 0
 2118 011a 30BD     		pop	{r4, r5, pc}
 2119              	.LVL244:
 2120              	.L238:
 872:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 873:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 874:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 2121              		.loc 1 874 0
 2122 011c 0120     		movs	r0, #1
 2123              	.LVL245:
 2124 011e 30BD     		pop	{r4, r5, pc}
 2125              	.L243:
 2126              		.align	2
 2127              	.L242:
 2128 0120 F369FFEF 		.word	-268473869
 2129 0124 00380140 		.word	1073821696
 2130 0128 00000000 		.word	.LANCHOR1
 2131 012c 00440040 		.word	1073759232
 2132              		.cfi_endproc
 2133              	.LFE132:
 2135              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 2136              		.align	1
 2137              		.global	UART_WaitOnFlagUntilTimeout
 2138              		.thumb
 2139              		.thumb_func
 2141              	UART_WaitOnFlagUntilTimeout:
 2142              	.LFB135:
 875:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 876:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 877:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 878:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 879:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return ret;
 880:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 881:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 882:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 883:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 884:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 885:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Check the UART Idle State.
 886:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart UART handle.
 887:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 888:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 889:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
 890:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 891:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 892:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 893:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART ErrorCode */
 894:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 895:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 896:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Init tickstart for timeout managment*/
 897:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tickstart = HAL_GetTick();
 898:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 899:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Transmitter is enabled */
 900:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 901:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 902:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until TEACK flag is set */
 903:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 904:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 905:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 906:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 907:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 908:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 909:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Receiver is enabled */
 910:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 911:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 912:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until REACK flag is set */
 913:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 914:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 915:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 916:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 917:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 918:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 919:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 920:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART State */
 921:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState  = HAL_UART_STATE_READY;
 922:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 923:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 924:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Process Unlocked */
 925:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UNLOCK(huart);
 926:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 927:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 928:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 929:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 930:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 931:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 932:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 933:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Initialize the UART mode according to the specified
 934:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 935:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 936:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 937:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 938:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 939:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 940:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the UART handle allocation */
 941:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart == NULL)
 942:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 943:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
 944:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 945:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 946:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 947:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 948:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 949:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 950:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 951:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 952:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 953:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 954:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 955:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 956:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 957:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 958:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 959:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Allocate lock resource and initialize it */
 960:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Lock = HAL_UNLOCKED;
 961:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 962:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init the low level hardware : GPIO, CLOCK */
 963:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     //HAL_UART_MspInit(huart);
 964:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 965:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 966:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState = HAL_UART_STATE_BUSY;
 967:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 968:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Disable the Peripheral */
 969:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_DISABLE(huart);
 970:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 971:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Set the UART Communication parameters */
 972:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 973:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 974:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
 975:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 976:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 977:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 978:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 979:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     //UART_AdvFeatureConfig(huart);
 980:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 981:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 982:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 983:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 984:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 985:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 986:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 987:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 988:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Enable the Peripheral */
 989:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_ENABLE(huart);
 990:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 991:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 992:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return UART_CheckIdleState(huart);
 993:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 994:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 995:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 996:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Handle UART Communication Timeout.
 997:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  huart UART handle.
 998:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Flag Specifies the UART flag to check
 999:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Status Flag status (SET or RESET)
1000:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Tickstart Tick start value
1001:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Timeout Timeout duration
1002:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1003:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1004:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
1005:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2143              		.loc 1 1005 0
 2144              		.cfi_startproc
 2145              		@ args = 4, pretend = 0, frame = 0
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 2147              	.LVL246:
 2148 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2149              	.LCFI4:
 2150              		.cfi_def_cfa_offset 24
 2151              		.cfi_offset 4, -24
 2152              		.cfi_offset 5, -20
 2153              		.cfi_offset 6, -16
 2154              		.cfi_offset 7, -12
 2155              		.cfi_offset 8, -8
 2156              		.cfi_offset 14, -4
 2157 0004 069D     		ldr	r5, [sp, #24]
 2158 0006 0446     		mov	r4, r0
 2159 0008 0E46     		mov	r6, r1
 2160 000a 1746     		mov	r7, r2
 2161 000c 9846     		mov	r8, r3
 2162              	.LVL247:
 2163              	.L245:
1006:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Wait until flag is set */
1007:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 2164              		.loc 1 1007 0 discriminator 1
 2165 000e 2268     		ldr	r2, [r4]
 2166              	.L247:
 2167 0010 D369     		ldr	r3, [r2, #28]
 2168 0012 3340     		ands	r3, r3, r6
 2169 0014 991B     		subs	r1, r3, r6
 2170 0016 4B42     		rsbs	r3, r1, #0
 2171 0018 4B41     		adcs	r3, r3, r1
 2172 001a BB42     		cmp	r3, r7
 2173 001c 1DD1     		bne	.L252
1008:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1009:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check for the Timeout */
1010:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(Timeout != HAL_MAX_DELAY)
 2174              		.loc 1 1010 0
 2175 001e 681C     		adds	r0, r5, #1
 2176 0020 F6D0     		beq	.L247
1011:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1012:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 2177              		.loc 1 1012 0
 2178 0022 9DB9     		cbnz	r5, .L248
 2179              	.L250:
 2180              	.LVL248:
 2181              	.LBB281:
 2182              	.LBB282:
1013:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1014:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
1015:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 2183              		.loc 1 1015 0
 2184 0024 2368     		ldr	r3, [r4]
 2185 0026 1A68     		ldr	r2, [r3]
 2186 0028 22F4D072 		bic	r2, r2, #416
 2187 002c 1A60     		str	r2, [r3]
1016:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2188              		.loc 1 1016 0
 2189 002e 9A68     		ldr	r2, [r3, #8]
 2190 0030 22F00102 		bic	r2, r2, #1
 2191 0034 9A60     		str	r2, [r3, #8]
1017:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1018:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->gState  = HAL_UART_STATE_READY;
 2192              		.loc 1 1018 0
 2193 0036 2023     		movs	r3, #32
 2194 0038 84F86930 		strb	r3, [r4, #105]
1019:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->RxState = HAL_UART_STATE_READY;
 2195              		.loc 1 1019 0
 2196 003c 84F86A30 		strb	r3, [r4, #106]
1020:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1021:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Process Unlocked */
1022:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_UNLOCK(huart);
 2197              		.loc 1 1022 0
 2198 0040 0023     		movs	r3, #0
 2199 0042 84F86830 		strb	r3, [r4, #104]
 2200 0046 0320     		movs	r0, #3
 2201 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2202              	.LVL249:
 2203              	.L248:
 2204              	.LBE282:
 2205              	.LBE281:
1012:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2206              		.loc 1 1012 0 discriminator 1
 2207 004c FFF7FEFF 		bl	HAL_GetTick
 2208              	.LVL250:
 2209 0050 C8EB0000 		rsb	r0, r8, r0
 2210 0054 A842     		cmp	r0, r5
 2211 0056 DAD9     		bls	.L245
 2212 0058 E4E7     		b	.L250
 2213              	.L252:
1023:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
1024:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1025:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1026:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1027:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 2214              		.loc 1 1027 0
 2215 005a 0020     		movs	r0, #0
1028:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2216              		.loc 1 1028 0
 2217 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2218              		.cfi_endproc
 2219              	.LFE135:
 2221              		.section	.text.UART_CheckIdleState,"ax",%progbits
 2222              		.align	1
 2223              		.global	UART_CheckIdleState
 2224              		.thumb
 2225              		.thumb_func
 2227              	UART_CheckIdleState:
 2228              	.LFB133:
 890:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 2229              		.loc 1 890 0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 0
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233              	.LVL251:
 2234 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 2235              	.LCFI5:
 2236              		.cfi_def_cfa_offset 24
 2237              		.cfi_offset 0, -24
 2238              		.cfi_offset 1, -20
 2239              		.cfi_offset 4, -16
 2240              		.cfi_offset 5, -12
 2241              		.cfi_offset 6, -8
 2242              		.cfi_offset 14, -4
 890:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 2243              		.loc 1 890 0
 2244 0002 0446     		mov	r4, r0
 894:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2245              		.loc 1 894 0
 2246 0004 0026     		movs	r6, #0
 2247 0006 C666     		str	r6, [r0, #108]
 897:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2248              		.loc 1 897 0
 2249 0008 FFF7FEFF 		bl	HAL_GetTick
 2250              	.LVL252:
 900:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2251              		.loc 1 900 0
 2252 000c 2368     		ldr	r3, [r4]
 2253 000e 1B68     		ldr	r3, [r3]
 2254 0010 1A07     		lsls	r2, r3, #28
 897:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2255              		.loc 1 897 0
 2256 0012 0546     		mov	r5, r0
 2257              	.LVL253:
 900:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2258              		.loc 1 900 0
 2259 0014 04D4     		bmi	.L254
 2260              	.LVL254:
 2261              	.L257:
 910:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2262              		.loc 1 910 0
 2263 0016 2368     		ldr	r3, [r4]
 2264 0018 1B68     		ldr	r3, [r3]
 2265 001a 5B07     		lsls	r3, r3, #29
 2266 001c 1AD5     		bpl	.L256
 2267 001e 0DE0     		b	.L263
 2268              	.LVL255:
 2269              	.L254:
 903:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 2270              		.loc 1 903 0
 2271 0020 6FF07E43 		mvn	r3, #-33554432
 2272 0024 0093     		str	r3, [sp]
 2273 0026 2046     		mov	r0, r4
 2274              	.LVL256:
 2275 0028 4FF40011 		mov	r1, #2097152
 2276 002c 3246     		mov	r2, r6
 2277 002e 2B46     		mov	r3, r5
 2278 0030 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2279              	.LVL257:
 2280 0034 0028     		cmp	r0, #0
 2281 0036 EED0     		beq	.L257
 2282              	.L259:
 906:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 2283              		.loc 1 906 0
 2284 0038 0320     		movs	r0, #3
 2285 003a 13E0     		b	.L258
 2286              	.L263:
 913:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 2287              		.loc 1 913 0
 2288 003c 6FF07E43 		mvn	r3, #-33554432
 2289 0040 0093     		str	r3, [sp]
 2290 0042 2046     		mov	r0, r4
 2291 0044 4FF48001 		mov	r1, #4194304
 2292 0048 0022     		movs	r2, #0
 2293 004a 2B46     		mov	r3, r5
 2294 004c FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2295              	.LVL258:
 2296 0050 0028     		cmp	r0, #0
 2297 0052 F1D1     		bne	.L259
 2298              	.L256:
 921:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 2299              		.loc 1 921 0
 2300 0054 2023     		movs	r3, #32
 925:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2301              		.loc 1 925 0
 2302 0056 0020     		movs	r0, #0
 921:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 2303              		.loc 1 921 0
 2304 0058 84F86930 		strb	r3, [r4, #105]
 925:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2305              		.loc 1 925 0
 2306 005c 84F86800 		strb	r0, [r4, #104]
 922:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2307              		.loc 1 922 0
 2308 0060 84F86A30 		strb	r3, [r4, #106]
 2309              	.L258:
 928:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2310              		.loc 1 928 0
 2311 0064 02B0     		add	sp, sp, #8
 2312              		@ sp needed
 2313 0066 70BD     		pop	{r4, r5, r6, pc}
 2314              		.cfi_endproc
 2315              	.LFE133:
 2317              		.section	.text.HAL_UART_Init,"ax",%progbits
 2318              		.align	1
 2319              		.global	HAL_UART_Init
 2320              		.thumb
 2321              		.thumb_func
 2323              	HAL_UART_Init:
 2324              	.LFB134:
 939:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the UART handle allocation */
 2325              		.loc 1 939 0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 0
 2328              		@ frame_needed = 0, uses_anonymous_args = 0
 2329              	.LVL259:
 2330 0000 10B5     		push	{r4, lr}
 2331              	.LCFI6:
 2332              		.cfi_def_cfa_offset 8
 2333              		.cfi_offset 4, -8
 2334              		.cfi_offset 14, -4
 941:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2335              		.loc 1 941 0
 2336 0002 0446     		mov	r4, r0
 2337 0004 28B3     		cbz	r0, .L266
 957:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2338              		.loc 1 957 0
 2339 0006 90F86930 		ldrb	r3, [r0, #105]	@ zero_extendqisi2
 2340 000a 03F0FF02 		and	r2, r3, #255
 2341 000e 0BB9     		cbnz	r3, .L267
 960:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2342              		.loc 1 960 0
 2343 0010 80F86820 		strb	r2, [r0, #104]
 2344              	.L267:
 966:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2345              		.loc 1 966 0
 2346 0014 2423     		movs	r3, #36
 2347 0016 84F86930 		strb	r3, [r4, #105]
 969:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2348              		.loc 1 969 0
 2349 001a 2368     		ldr	r3, [r4]
 2350 001c 1A68     		ldr	r2, [r3]
 2351 001e 22F00102 		bic	r2, r2, #1
 2352 0022 1A60     		str	r2, [r3]
 972:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2353              		.loc 1 972 0
 2354 0024 2046     		mov	r0, r4
 2355              	.LVL260:
 2356 0026 FFF7FEFF 		bl	UART_SetConfig
 2357              	.LVL261:
 2358 002a 0128     		cmp	r0, #1
 2359 002c 11D0     		beq	.L266
 985:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 2360              		.loc 1 985 0
 2361 002e 2368     		ldr	r3, [r4]
 2362 0030 5A68     		ldr	r2, [r3, #4]
 2363 0032 22F49042 		bic	r2, r2, #18432
 2364 0036 5A60     		str	r2, [r3, #4]
 986:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2365              		.loc 1 986 0
 2366 0038 9A68     		ldr	r2, [r3, #8]
 2367 003a 22F02A02 		bic	r2, r2, #42
 2368 003e 9A60     		str	r2, [r3, #8]
 989:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2369              		.loc 1 989 0
 2370 0040 1A68     		ldr	r2, [r3]
 2371 0042 42F00102 		orr	r2, r2, #1
 992:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2372              		.loc 1 992 0
 2373 0046 2046     		mov	r0, r4
 989:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2374              		.loc 1 989 0
 2375 0048 1A60     		str	r2, [r3]
 993:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2376              		.loc 1 993 0
 2377 004a BDE81040 		pop	{r4, lr}
 2378              	.LVL262:
 992:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2379              		.loc 1 992 0
 2380 004e FFF7FEBF 		b	UART_CheckIdleState
 2381              	.LVL263:
 2382              	.L266:
 993:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2383              		.loc 1 993 0
 2384 0052 0120     		movs	r0, #1
 2385 0054 10BD     		pop	{r4, pc}
 2386              		.cfi_endproc
 2387              	.LFE134:
 2389              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 2390              		.align	1
 2391              		.global	HAL_UART_Transmit
 2392              		.thumb
 2393              		.thumb_func
 2395              	HAL_UART_Transmit:
 2396              	.LFB136:
1029:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1030:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1031:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1032:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1033:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Send an amount of data in blocking mode.
1034:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1035:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: Pointer to data buffer.
1036:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: Amount of data to be sent.
1037:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1038:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1039:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1040:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1041:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2397              		.loc 1 1041 0
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 0
 2400              		@ frame_needed = 0, uses_anonymous_args = 0
 2401              	.LVL264:
 2402 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 2403              	.LCFI7:
 2404              		.cfi_def_cfa_offset 32
 2405              		.cfi_offset 0, -32
 2406              		.cfi_offset 1, -28
 2407              		.cfi_offset 4, -24
 2408              		.cfi_offset 5, -20
 2409              		.cfi_offset 6, -16
 2410              		.cfi_offset 7, -12
 2411              		.cfi_offset 8, -8
 2412              		.cfi_offset 14, -4
 2413              		.loc 1 1041 0
 2414 0004 1F46     		mov	r7, r3
1042:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1043:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
1044:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1045:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Tx process is not already ongoing */
1046:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_READY)
 2415              		.loc 1 1046 0
 2416 0006 90F86930 		ldrb	r3, [r0, #105]	@ zero_extendqisi2
 2417              	.LVL265:
 2418 000a 202B     		cmp	r3, #32
1041:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
 2419              		.loc 1 1041 0
 2420 000c 0446     		mov	r4, r0
 2421 000e 0D46     		mov	r5, r1
 2422 0010 1646     		mov	r6, r2
 2423              		.loc 1 1046 0
 2424 0012 4BD1     		bne	.L283
1047:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1048:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 2425              		.loc 1 1048 0
 2426 0014 0029     		cmp	r1, #0
 2427 0016 47D0     		beq	.L282
 2428              		.loc 1 1048 0 is_stmt 0 discriminator 1
 2429 0018 002A     		cmp	r2, #0
 2430 001a 45D0     		beq	.L282
1049:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1050:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
1051:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1052:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1053:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1054:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 2431              		.loc 1 1054 0 is_stmt 1
 2432 001c 90F86830 		ldrb	r3, [r0, #104]	@ zero_extendqisi2
 2433 0020 012B     		cmp	r3, #1
 2434 0022 43D0     		beq	.L283
 2435              		.loc 1 1054 0 is_stmt 0 discriminator 2
 2436 0024 0123     		movs	r3, #1
 2437 0026 80F86830 		strb	r3, [r0, #104]
1055:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1056:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2438              		.loc 1 1056 0 is_stmt 1 discriminator 2
 2439 002a 0023     		movs	r3, #0
 2440 002c C366     		str	r3, [r0, #108]
1057:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 2441              		.loc 1 1057 0 discriminator 2
 2442 002e 2123     		movs	r3, #33
 2443 0030 80F86930 		strb	r3, [r0, #105]
1058:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1059:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1060:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 2444              		.loc 1 1060 0 discriminator 2
 2445 0034 FFF7FEFF 		bl	HAL_GetTick
 2446              	.LVL266:
1061:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1062:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferSize = Size;
 2447              		.loc 1 1062 0 discriminator 2
 2448 0038 A4F85060 		strh	r6, [r4, #80]	@ movhi
1060:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2449              		.loc 1 1060 0 discriminator 2
 2450 003c 8046     		mov	r8, r0
 2451              	.LVL267:
1063:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferCount = Size;
 2452              		.loc 1 1063 0 discriminator 2
 2453 003e A4F85260 		strh	r6, [r4, #82]	@ movhi
 2454              	.LVL268:
 2455              	.L274:
1064:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->TxXferCount > 0U)
 2456              		.loc 1 1064 0 discriminator 1
 2457 0042 B4F85220 		ldrh	r2, [r4, #82]
 2458 0046 92B2     		uxth	r2, r2
 2459 0048 02B3     		cbz	r2, .L284
1065:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1066:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->TxXferCount--;
 2460              		.loc 1 1066 0
 2461 004a B4F85230 		ldrh	r3, [r4, #82]
1067:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 2462              		.loc 1 1067 0
 2463 004e 0097     		str	r7, [sp]
1066:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 2464              		.loc 1 1066 0
 2465 0050 013B     		subs	r3, r3, #1
 2466 0052 9BB2     		uxth	r3, r3
 2467 0054 A4F85230 		strh	r3, [r4, #82]	@ movhi
 2468              		.loc 1 1067 0
 2469 0058 2046     		mov	r0, r4
 2470 005a 8021     		movs	r1, #128
 2471 005c 0022     		movs	r2, #0
 2472 005e 4346     		mov	r3, r8
 2473 0060 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2474              	.LVL269:
 2475 0064 08B1     		cbz	r0, .L275
 2476              	.L279:
1068:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1069:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 2477              		.loc 1 1069 0
 2478 0066 0320     		movs	r0, #3
 2479 0068 21E0     		b	.L273
 2480              	.L275:
1070:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1071:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 2481              		.loc 1 1071 0
 2482 006a A368     		ldr	r3, [r4, #8]
 2483 006c B3F5805F 		cmp	r3, #4096
 2484 0070 2368     		ldr	r3, [r4]
 2485 0072 07D1     		bne	.L276
 2486              		.loc 1 1071 0 is_stmt 0 discriminator 1
 2487 0074 2269     		ldr	r2, [r4, #16]
 2488 0076 2AB9     		cbnz	r2, .L276
 2489              	.LVL270:
1072:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1073:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData;
1074:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 2490              		.loc 1 1074 0 is_stmt 1
 2491 0078 35F8022B 		ldrh	r2, [r5], #2
 2492              	.LVL271:
 2493 007c C2F30802 		ubfx	r2, r2, #0, #9
 2494 0080 1A85     		strh	r2, [r3, #40]	@ movhi
 2495              	.LVL272:
1075:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData += 2U;
 2496              		.loc 1 1075 0
 2497 0082 DEE7     		b	.L274
 2498              	.LVL273:
 2499              	.L276:
1076:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1077:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1078:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1079:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 2500              		.loc 1 1079 0
 2501 0084 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 2502 0086 1A85     		strh	r2, [r3, #40]	@ movhi
 2503 0088 0135     		adds	r5, r5, #1
 2504              	.LVL274:
 2505 008a DAE7     		b	.L274
 2506              	.L284:
1080:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1081:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1082:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 2507              		.loc 1 1082 0
 2508 008c 0097     		str	r7, [sp]
 2509 008e 2046     		mov	r0, r4
 2510 0090 4021     		movs	r1, #64
 2511 0092 4346     		mov	r3, r8
 2512 0094 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2513              	.LVL275:
 2514 0098 0028     		cmp	r0, #0
 2515 009a E4D1     		bne	.L279
1083:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1084:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
1085:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1086:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1087:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Tx process, restore huart->gState to Ready */
1088:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_READY;
 2516              		.loc 1 1088 0
 2517 009c 2023     		movs	r3, #32
 2518 009e 84F86930 		strb	r3, [r4, #105]
1089:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1090:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1091:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 2519              		.loc 1 1091 0
 2520 00a2 84F86800 		strb	r0, [r4, #104]
1092:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1093:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 2521              		.loc 1 1093 0
 2522 00a6 02E0     		b	.L273
 2523              	.LVL276:
 2524              	.L282:
1050:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 2525              		.loc 1 1050 0
 2526 00a8 0120     		movs	r0, #1
 2527              	.LVL277:
 2528 00aa 00E0     		b	.L273
 2529              	.LVL278:
 2530              	.L283:
1094:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1095:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1096:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1097:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 2531              		.loc 1 1097 0
 2532 00ac 0220     		movs	r0, #2
 2533              	.LVL279:
 2534              	.L273:
1098:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1099:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2535              		.loc 1 1099 0
 2536 00ae 02B0     		add	sp, sp, #8
 2537              		@ sp needed
 2538 00b0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2539              		.cfi_endproc
 2540              	.LFE136:
 2542              		.section	.text.HAL_UART_Receive,"ax",%progbits
 2543              		.align	1
 2544              		.global	HAL_UART_Receive
 2545              		.thumb
 2546              		.thumb_func
 2548              	HAL_UART_Receive:
 2549              	.LFB137:
1100:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1101:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1102:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1103:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1104:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Receive an amount of data in blocking mode.
1105:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1106:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: pointer to data buffer.
1107:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: amount of data to be received.
1108:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1110:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1111:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1112:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2550              		.loc 1 1112 0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 0
 2553              		@ frame_needed = 0, uses_anonymous_args = 0
 2554              	.LVL280:
 2555 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 2556              	.LCFI8:
 2557              		.cfi_def_cfa_offset 32
 2558              		.cfi_offset 0, -32
 2559              		.cfi_offset 1, -28
 2560              		.cfi_offset 4, -24
 2561              		.cfi_offset 5, -20
 2562              		.cfi_offset 6, -16
 2563              		.cfi_offset 7, -12
 2564              		.cfi_offset 8, -8
 2565              		.cfi_offset 14, -4
 2566              		.loc 1 1112 0
 2567 0004 1F46     		mov	r7, r3
1113:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1114:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t uhMask;
1115:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
1116:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1117:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Rx process is not already ongoing */
1118:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 2568              		.loc 1 1118 0
 2569 0006 90F86A30 		ldrb	r3, [r0, #106]	@ zero_extendqisi2
 2570              	.LVL281:
 2571 000a 202B     		cmp	r3, #32
1112:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
 2572              		.loc 1 1112 0
 2573 000c 0446     		mov	r4, r0
 2574 000e 0D46     		mov	r5, r1
 2575 0010 1646     		mov	r6, r2
 2576              		.loc 1 1118 0
 2577 0012 5DD1     		bne	.L299
1119:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1120:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 2578              		.loc 1 1120 0
 2579 0014 0029     		cmp	r1, #0
 2580 0016 59D0     		beq	.L298
 2581              		.loc 1 1120 0 is_stmt 0 discriminator 1
 2582 0018 002A     		cmp	r2, #0
 2583 001a 57D0     		beq	.L298
1121:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1122:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
1123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1124:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1125:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1126:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 2584              		.loc 1 1126 0 is_stmt 1
 2585 001c 90F86830 		ldrb	r3, [r0, #104]	@ zero_extendqisi2
 2586 0020 012B     		cmp	r3, #1
 2587 0022 55D0     		beq	.L299
 2588              		.loc 1 1126 0 is_stmt 0 discriminator 2
 2589 0024 0123     		movs	r3, #1
 2590 0026 80F86830 		strb	r3, [r0, #104]
1127:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1128:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2591              		.loc 1 1128 0 is_stmt 1 discriminator 2
 2592 002a 0023     		movs	r3, #0
 2593 002c C366     		str	r3, [r0, #108]
1129:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2594              		.loc 1 1129 0 discriminator 2
 2595 002e 2223     		movs	r3, #34
 2596 0030 80F86A30 		strb	r3, [r0, #106]
1130:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1131:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1132:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 2597              		.loc 1 1132 0 discriminator 2
 2598 0034 FFF7FEFF 		bl	HAL_GetTick
 2599              	.LVL282:
1133:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferSize = Size;
1135:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferCount = Size;
1136:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1137:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Computation of UART mask to apply to RDR register */
1138:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     UART_MASK_COMPUTATION(huart);
 2600              		.loc 1 1138 0 discriminator 2
 2601 0038 A268     		ldr	r2, [r4, #8]
1134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferCount = Size;
 2602              		.loc 1 1134 0 discriminator 2
 2603 003a A4F85860 		strh	r6, [r4, #88]	@ movhi
 2604              		.loc 1 1138 0 discriminator 2
 2605 003e B2F5805F 		cmp	r2, #4096
1132:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2606              		.loc 1 1132 0 discriminator 2
 2607 0042 8046     		mov	r8, r0
 2608              	.LVL283:
1135:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2609              		.loc 1 1135 0 discriminator 2
 2610 0044 A4F85A60 		strh	r6, [r4, #90]	@ movhi
 2611              		.loc 1 1138 0 discriminator 2
 2612 0048 04D1     		bne	.L287
 2613              		.loc 1 1138 0 is_stmt 0 discriminator 1
 2614 004a 2369     		ldr	r3, [r4, #16]
 2615 004c 2BB9     		cbnz	r3, .L288
 2616 004e 40F2FF13 		movw	r3, #511
 2617 0052 0DE0     		b	.L307
 2618              	.L287:
 2619              		.loc 1 1138 0 discriminator 2
 2620 0054 2AB9     		cbnz	r2, .L290
 2621              		.loc 1 1138 0 discriminator 1
 2622 0056 2369     		ldr	r3, [r4, #16]
 2623 0058 0BB9     		cbnz	r3, .L291
 2624              	.L288:
 2625              		.loc 1 1138 0 discriminator 2
 2626 005a FF23     		movs	r3, #255
 2627 005c 08E0     		b	.L307
 2628              	.L291:
 2629 005e 7F23     		movs	r3, #127
 2630 0060 06E0     		b	.L307
 2631              	.L290:
 2632 0062 B2F1805F 		cmp	r2, #268435456
 2633 0066 05D1     		bne	.L289
 2634              		.loc 1 1138 0 discriminator 1
 2635 0068 2369     		ldr	r3, [r4, #16]
 2636 006a 002B     		cmp	r3, #0
 2637 006c F7D0     		beq	.L291
 2638              		.loc 1 1138 0 discriminator 2
 2639 006e 3F23     		movs	r3, #63
 2640              	.L307:
 2641 0070 A4F85C30 		strh	r3, [r4, #92]	@ movhi
 2642              	.L289:
1139:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     uhMask = huart->Mask;
 2643              		.loc 1 1139 0 is_stmt 1
 2644 0074 B4F85C60 		ldrh	r6, [r4, #92]
 2645              	.LVL284:
 2646              	.L292:
1140:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1141:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* as long as data have to be received */
1142:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->RxXferCount > 0U)
 2647              		.loc 1 1142 0 discriminator 1
 2648 0078 B4F85A20 		ldrh	r2, [r4, #90]
 2649 007c 92B2     		uxth	r2, r2
 2650 007e F2B1     		cbz	r2, .L308
1143:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1144:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->RxXferCount--;
 2651              		.loc 1 1144 0
 2652 0080 B4F85A30 		ldrh	r3, [r4, #90]
1145:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 2653              		.loc 1 1145 0
 2654 0084 0097     		str	r7, [sp]
1144:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 2655              		.loc 1 1144 0
 2656 0086 013B     		subs	r3, r3, #1
 2657 0088 9BB2     		uxth	r3, r3
 2658 008a A4F85A30 		strh	r3, [r4, #90]	@ movhi
 2659              		.loc 1 1145 0
 2660 008e 2046     		mov	r0, r4
 2661 0090 2021     		movs	r1, #32
 2662 0092 0022     		movs	r2, #0
 2663 0094 4346     		mov	r3, r8
 2664 0096 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2665              	.LVL285:
 2666 009a D8B9     		cbnz	r0, .L300
1146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1147:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
1148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1149:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 2667              		.loc 1 1149 0
 2668 009c A368     		ldr	r3, [r4, #8]
 2669 009e 2268     		ldr	r2, [r4]
 2670 00a0 B3F5805F 		cmp	r3, #4096
 2671 00a4 06D1     		bne	.L293
 2672              		.loc 1 1149 0 is_stmt 0 discriminator 1
 2673 00a6 2369     		ldr	r3, [r4, #16]
 2674 00a8 23B9     		cbnz	r3, .L293
 2675              	.LVL286:
1150:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1151:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData ;
1152:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 2676              		.loc 1 1152 0 is_stmt 1
 2677 00aa 938C     		ldrh	r3, [r2, #36]
 2678 00ac 3340     		ands	r3, r3, r6
 2679 00ae 25F8023B 		strh	r3, [r5], #2	@ movhi
 2680              	.LVL287:
1153:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData +=2U;
 2681              		.loc 1 1153 0
 2682 00b2 E1E7     		b	.L292
 2683              	.LVL288:
 2684              	.L293:
1154:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1155:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1157:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 2685              		.loc 1 1157 0
 2686 00b4 938C     		ldrh	r3, [r2, #36]
 2687 00b6 3340     		ands	r3, r3, r6
 2688 00b8 2B70     		strb	r3, [r5]
 2689 00ba 0135     		adds	r5, r5, #1
 2690              	.LVL289:
 2691 00bc DCE7     		b	.L292
 2692              	.L308:
1158:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1159:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1160:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1161:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1162:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_READY;
 2693              		.loc 1 1162 0
 2694 00be 2023     		movs	r3, #32
 2695 00c0 84F86A30 		strb	r3, [r4, #106]
1163:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1164:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1165:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 2696              		.loc 1 1165 0
 2697 00c4 84F86820 		strb	r2, [r4, #104]
1166:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1167:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 2698              		.loc 1 1167 0
 2699 00c8 1046     		mov	r0, r2
 2700 00ca 04E0     		b	.L286
 2701              	.LVL290:
 2702              	.L298:
1122:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 2703              		.loc 1 1122 0
 2704 00cc 0120     		movs	r0, #1
 2705              	.LVL291:
 2706 00ce 02E0     		b	.L286
 2707              	.LVL292:
 2708              	.L299:
1168:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1169:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1171:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 2709              		.loc 1 1171 0
 2710 00d0 0220     		movs	r0, #2
 2711              	.LVL293:
 2712 00d2 00E0     		b	.L286
 2713              	.LVL294:
 2714              	.L300:
1147:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 2715              		.loc 1 1147 0
 2716 00d4 0320     		movs	r0, #3
 2717              	.LVL295:
 2718              	.L286:
1172:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1173:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2719              		.loc 1 1173 0
 2720 00d6 02B0     		add	sp, sp, #8
 2721              		@ sp needed
 2722 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2723              		.cfi_endproc
 2724              	.LFE137:
 2726              		.section	.rodata
 2727              		.set	.LANCHOR1,. + 0
 2730              	CSWTCH.73:
 2731 0000 00       		.byte	0
 2732 0001 04       		.byte	4
 2733 0002 08       		.byte	8
 2734 0003 02       		.byte	2
 2735              		.bss
 2736              		.align	2
 2737              		.set	.LANCHOR0,. + 0
 2740              	tick.6670:
 2741 0000 00000000 		.space	4
 2742              		.text
 2743              	.Letext0:
 2744              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2745              		.file 4 "/usr/include/newlib/stdint.h"
 2746              		.file 5 ".././hal/stm32f3/CMSIS/device/stm32f303x8.h"
 2747              		.file 6 ".././hal/stm32f3/CMSIS/device/stm32f3xx.h"
 2748              		.file 7 ".././hal/stm32f3/stm32f3xx_hal_def.h"
 2749              		.file 8 ".././hal/stm32f3/stm32f3xx_hal_rcc.h"
 2750              		.file 9 ".././hal/stm32f3/stm32f3xx_hal_gpio.h"
 2751              		.file 10 ".././hal/stm32f3/stm32f3xx_hal_dma.h"
 2752              		.file 11 ".././hal/stm32f3/stm32f3xx_hal_uart.h"
 2753              		.file 12 ".././hal/stm32f3/CMSIS/core/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f3_hal_lowlevel.c
     /tmp/ccHNWmaL.s:21     .text.HAL_GetTick:00000000 $t
     /tmp/ccHNWmaL.s:26     .text.HAL_GetTick:00000000 HAL_GetTick
     /tmp/ccHNWmaL.s:44     .text.HAL_GetTick:0000000c $d
     /tmp/ccHNWmaL.s:49     .text.HAL_RCC_GetSysClockFreq:00000000 $t
     /tmp/ccHNWmaL.s:54     .text.HAL_RCC_GetSysClockFreq:00000000 HAL_RCC_GetSysClockFreq
     /tmp/ccHNWmaL.s:68     .text.HAL_RCC_GetPCLK1Freq:00000000 $t
     /tmp/ccHNWmaL.s:73     .text.HAL_RCC_GetPCLK1Freq:00000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccHNWmaL.s:87     .text.HAL_RCC_OscConfig:00000000 $t
     /tmp/ccHNWmaL.s:92     .text.HAL_RCC_OscConfig:00000000 HAL_RCC_OscConfig
     /tmp/ccHNWmaL.s:800    .text.HAL_RCC_OscConfig:000002ec $d
     /tmp/ccHNWmaL.s:806    .text.HAL_RCC_OscConfig:000002f8 $t
     /tmp/ccHNWmaL.s:1250   .text.HAL_RCC_OscConfig:000004f0 $d
     /tmp/ccHNWmaL.s:1255   .text.HAL_RCC_ClockConfig:00000000 $t
     /tmp/ccHNWmaL.s:1260   .text.HAL_RCC_ClockConfig:00000000 HAL_RCC_ClockConfig
     /tmp/ccHNWmaL.s:1534   .text.HAL_RCC_ClockConfig:0000014c $d
     /tmp/ccHNWmaL.s:1540   .text.HAL_RCC_GetPCLK2Freq:00000000 $t
     /tmp/ccHNWmaL.s:1545   .text.HAL_RCC_GetPCLK2Freq:00000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccHNWmaL.s:1559   .text.HAL_GPIO_Init:00000000 $t
     /tmp/ccHNWmaL.s:1564   .text.HAL_GPIO_Init:00000000 HAL_GPIO_Init
     /tmp/ccHNWmaL.s:1836   .text.HAL_GPIO_Init:00000188 $d
     /tmp/ccHNWmaL.s:1843   .text.HAL_GPIO_WritePin:00000000 $t
     /tmp/ccHNWmaL.s:1848   .text.HAL_GPIO_WritePin:00000000 HAL_GPIO_WritePin
     /tmp/ccHNWmaL.s:1869   .text.HAL_GPIO_TogglePin:00000000 $t
     /tmp/ccHNWmaL.s:1874   .text.HAL_GPIO_TogglePin:00000000 HAL_GPIO_TogglePin
     /tmp/ccHNWmaL.s:1892   .text.UART_SetConfig:00000000 $t
     /tmp/ccHNWmaL.s:1897   .text.UART_SetConfig:00000000 UART_SetConfig
     /tmp/ccHNWmaL.s:1985   .text.UART_SetConfig:0000006e $d
     /tmp/ccHNWmaL.s:2062   .text.UART_SetConfig:000000c8 $d
     /tmp/ccHNWmaL.s:2128   .text.UART_SetConfig:00000120 $d
     /tmp/ccHNWmaL.s:2136   .text.UART_WaitOnFlagUntilTimeout:00000000 $t
     /tmp/ccHNWmaL.s:2141   .text.UART_WaitOnFlagUntilTimeout:00000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccHNWmaL.s:2222   .text.UART_CheckIdleState:00000000 $t
     /tmp/ccHNWmaL.s:2227   .text.UART_CheckIdleState:00000000 UART_CheckIdleState
     /tmp/ccHNWmaL.s:2318   .text.HAL_UART_Init:00000000 $t
     /tmp/ccHNWmaL.s:2323   .text.HAL_UART_Init:00000000 HAL_UART_Init
     /tmp/ccHNWmaL.s:2390   .text.HAL_UART_Transmit:00000000 $t
     /tmp/ccHNWmaL.s:2395   .text.HAL_UART_Transmit:00000000 HAL_UART_Transmit
     /tmp/ccHNWmaL.s:2543   .text.HAL_UART_Receive:00000000 $t
     /tmp/ccHNWmaL.s:2548   .text.HAL_UART_Receive:00000000 HAL_UART_Receive
     /tmp/ccHNWmaL.s:2730   .rodata:00000000 CSWTCH.73
     /tmp/ccHNWmaL.s:2736   .bss:00000000 $d
     /tmp/ccHNWmaL.s:2740   .bss:00000000 tick.6670
                     .debug_frame:00000010 $d
     /tmp/ccHNWmaL.s:1994   .text.UART_SetConfig:00000077 $d
     /tmp/ccHNWmaL.s:1994   .text.UART_SetConfig:00000078 $t
     /tmp/ccHNWmaL.s:2072   .text.UART_SetConfig:000000d1 $d
     /tmp/ccHNWmaL.s:2072   .text.UART_SetConfig:000000d2 $t

NO UNDEFINED SYMBOLS
